{"length":{"s":"The length property represents the length of a string.","y":"","p":null},"charAt":{"s":"The charAt() method returns the specified character from a string.","y":"str.charAt(index)","p":[{"t":"index","d":"An integer between 0 and 1-less-than the length of the string."}]},"charCodeAt":{"s":"The charCodeAt() method returns the numeric Unicode value of the character at the given index (except for unicode codepoints &gt; 0x10000).","y":"str.charCodeAt(index)","p":[{"t":"index","d":"An integer greater than or equal to 0 and less than the length of the string; if it is not a number, it defaults to 0."}]},"codePointAt":{"s":"The codePointAt() method returns a non-negative integer that is the UTF-16 encoded code point value.","y":"str.codePointAt(pos)","p":[{"t":"pos","d":"Position of an element in the String to return the code point value from."}]},"concat":{"s":"The concat() method combines the text of two or more strings and returns a new string.","y":"str.concat(string2, string3[, ..., stringN])","p":[{"t":"string2...stringN","d":"Strings to concatenate to this string."}]},"contains":{"s":"","y":"str.contains(searchString [, position]);","p":[{"t":"searchString","d":"A string to be searched for within this string."},{"t":"position","d":"The position in this string at which to begin searching for searchString; defaults to 0."}]},"endsWith":{"s":"The endsWith() method determines whether a string ends with the characters of another string, returning true or false as appropriate.","y":"str.endsWith(searchString [, position]);","p":[{"t":"searchString","d":"The characters to be searched for at the end of this string."},{"t":"position","d":"Search within this string as if this string were only this long; defaults to this string's actual length, clamped within the range established by this string's length."}]},"indexOf":{"s":"The indexOf() method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex,\n returns -1 if the value is not found.","y":"str.indexOf(searchValue[, fromIndex])","p":[{"t":"searchValue","d":"A string representing the value to search for."},{"t":"fromIndex","d":"The location within the calling string to start the search from. It can be any integer between 0 and the length of the string. The default value is 0."}]},"lastIndexOf":{"s":"The lastIndexOf() method returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. The calling string is searched backward, starting at fromIndex.","y":"str.lastIndexOf(searchValue[, fromIndex])","p":[{"t":"searchValue","d":"A string representing the value to search for."},{"t":"fromIndex","d":"The location within the calling string to start the search at, indexed from left to right. It can be any integer between 0 and the length of the string. The default value is the length of the string."}]},"localeCompare":{"s":"The localeCompare() method returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.","y":"str.localeCompare(compareString [, locales [, options]])","p":[{"t":"compareString","d":"The string against which the referring string is comparing"},{"t":"locales","d":""},{"t":"options","d":"Variant collations for certain locales. Possible values include: \"big5han\", \"dict\", \"direct\", \"ducet\", \"gb2312\", \"phonebk\", \"phonetic\", \"pinyin\", \"reformed\", \"searchjl\", \"stroke\", \"trad\", \"unihan\". The \"standard\" and \"search\" values are ignored; they are replaced by the options property usage (see below)."},{"t":"options","d":"Whether numeric collation should be used, such that \"1\" &lt; \"2\" &lt; \"10\". Possible values are \"true\" and \"false\". This option can be set through an options property or through a Unicode extension key; if both are provided, the options property takes precedence."},{"t":"options","d":"Whether upper case or lower case should sort first. Possible values are \"upper\", \"lower\", or \"false\" (use the locale's default). This option can be set through an options property or through a Unicode extension key; if both are provided, the options property takes precedence."},{"t":"options","d":""},{"t":"localeMatcher","d":"The locale matching algorithm to use. Possible values are \"lookup\" and \"best fit\"; the default is \"best fit\". For information about this option, see the Intl page."},{"t":"usage","d":"Whether the comparison is for sorting or for searching for matching strings. Possible values are \"sort\" and \"search\"; the default is \"sort\"."},{"t":"sensitivity","d":"Which differences in the strings should lead to non-zero result values. Possible values are:\n        \"base\": Only strings that differ in base letters compare as unequal. Examples: a =\u0338 b, a = a\u0301, a = A.\n          \"accent\": Only strings that differ in base letters or accents and other diacritic marks compare as unequal. Examples: a =\u0338 b, a =\u0338 a\u0301, a = A.\n          \"case\": Only strings that differ in base letters or case compare as unequal. Examples: a =\u0338 b, a = a\u0301, a =\u0338 A.\n          \"variant\": Strings that differ in base letters, accents and other diacritic marks, or case compare as unequal. Other differences may also be taken into consideration. Examples: a =\u0338 b, a =\u0338 a\u0301, a =\u0338 A.\n        The default is \"variant\" for usage \"sort\"; it's locale dependent for usage \"search\"."},{"t":"ignore\u00adPunctua\u00adtion","d":"Whether punctuation should be ignored. Possible values are true and false; the default is false."},{"t":"numeric","d":"Whether numeric collation should be used, such that \"1\" &lt; \"2\" &lt; \"10\". Possible values are true and false; the default is false. This option can be set through an options property or through a Unicode extension key; if both are provided, the options property takes precedence. Implementations are not required to support this property."},{"t":"caseFirst","d":"Whether upper case or lower case should sort first. Possible values are \"upper\", \"lower\", or \"false\" (use the locale's default); the default is \"false\". This option can be set through an options property or through a Unicode extension key; if both are provided, the options property takes precedence. Implementations are not required to support this property."}]},"match":{"s":"The match() method retrieves the matches when matching a string against a regular expression.","y":"str.match(regexp);","p":[{"t":"regexp","d":"A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj)."},{"t":"array","d":"An Array containing the matched results or null if there were no matches."}]},"quote":{"s":"The non-standard quote() method returns a copy of the string, replacing various special characters in the string with their escape sequences and wrapping the result in double-quotes (\").","y":"str.quote()","p":null},"repeat":{"s":"The repeat() method copies the current string a given times and returns the new string.","y":"str.repeat(count)","p":[{"t":"count","d":"An integer between 0 and +\u221e : [ 0, +\u221e)."},{"t":"RangeError","d":"The repeat count must be positive and less than infinity."}]},"replace":{"s":"The replace() method returns a new string with some or all matches of a pattern replaced by a replacement.\u00a0 The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match.","y":"str.replace(regexp|substr, newSubStr|function[,   flags]);","p":[{"t":"regexp","d":"A RegExp object. The match is replaced by the return value of parameter #2."},{"t":"substr","d":"A String that is to be replaced by newSubStr."},{"t":"newSubStr","d":"The String that replaces the substring received from parameter #1. A number of special replacement patterns are supported; see the \"Specifying a string as a parameter\" section below."},{"t":"function","d":"A function to be invoked to create the new substring (to put in place of the substring received from parameter #1). The arguments supplied to this function are described in the \"Specifying a function as a parameter\" section below."},{"t":"flags","d":"A string specifying a combination of regular expression flags. The use of the flags parameter in the String.replace method is non-standard. Instead of using this parameter, use a RegExp object with the corresponding flags. The value of this parameter if it is used should be a string consisting of one or more of the following characters to affect the operation as described:"},{"t":"g","d":"global match"},{"t":"i","d":"ignore case"},{"t":"m","d":"match over multiple lines"},{"t":"y","d":"sticky"}]},"search":{"s":"The search() method executes a search for a match between a regular expression and this String object.","y":"str.search(regexp)","p":[{"t":"regexp","d":"A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj)."}]},"slice":{"s":"The slice() method extracts a section of a string and returns a new string.","y":"str.slice(beginSlice[, endSlice])","p":[{"t":"beginSlice","d":"The zero-based index at which to begin extraction. If negative, it is treated as (sourceLength-beginSlice) where sourceLength is the length of the string."},{"t":"endSlice","d":"The zero-based index at which to end extraction. If omitted, slice extracts to the end of the string. If negative, it is treated as (sourceLength-endSlice) where sourceLength is the length of the string."}]},"split":{"s":"The split() method splits a String object into an array of strings by separating the string into substrings.","y":"str.split([separator][, limit])","p":[{"t":"separator","d":"Specifies the character(s) to use for separating the string. The separator is treated as a string or a regular expression. If separator is omitted, the array returned contains one element consisting of the entire string. If separator is an empty string, str is converted to an array of characters."},{"t":"limit","d":"Integer specifying a limit on the number of splits to be found. The split method still splits on every match of separator, but it truncates the returned array to at most limit elements."}]},"startsWith":{"s":"The startsWith() method determines whether a string begins with the characters of another string, returning true or false as appropriate.","y":"str.startsWith(searchString [, position]);","p":[{"t":"searchString","d":"The characters to be searched for at the start of this string."},{"t":"position","d":"The position in this string at which to begin searching for searchString; defaults to 0."}]},"substr":{"s":"The substr() method returns the characters in a string beginning at the specified location through the specified number of characters.","y":"str.substr(start[, length])","p":[{"t":"start","d":"Location at which to begin extracting characters."},{"t":"length","d":"The number of characters to extract."}]},"substring":{"s":"The substring() method returns a subset of a string between one index and another, or through the end of the string.","y":"str.substring(indexA[, indexB])","p":[{"t":"indexA","d":"An integer between 0 and the length of the string."},{"t":"indexB","d":"(optional) An integer between 0 and the length of the string."}]},"toLocaleLowerCase":{"s":"The toLocaleLowerCase() method returns the calling string value converted to lower case, according to any locale-specific case mappings.","y":"str.toLocaleLowerCase()","p":null},"toLocaleUpperCase":{"s":"The toLocaleUpperCase() method returns the calling string value converted to upper case, according to any locale-specific case mappings.","y":"str.toLocaleUpperCase() ","p":null},"toLowerCase":{"s":"The toLowerCase() method returns the calling string value converted to lowercase.","y":"str.toLowerCase()","p":null},"toSource":{"s":"The toSource() method returns a string representing the source code of the object.","y":"String.toSource()\nstr.toSource()\n","p":null},"toString":{"s":"The toString() method returns a string representing the specified object.","y":"str.toString()","p":null},"toUpperCase":{"s":"The toUpperCase() method returns the calling string value converted to uppercase.","y":"str.toUpperCase()","p":null},"trim":{"s":"The trim() method removes whitespace from both ends of the string.","y":"str.trim()","p":null},"trimLeft":{"s":"The trimLeft() removes whitespace from the left end of the string.","y":"str.trimLeft()","p":null},"trimRight":{"s":"The trimRight() method removes whitespace from the right end of the string.","y":"str.trimRight()","p":null},"valueOfanchor":{"s":"","y":"","p":null},"big":{"s":"The big() method creates a &lt;big&gt; HTML element that causes a string to be displayed in a big font.","y":"str.big()","p":null},"blink":{"s":"The blink() method creates a &lt;blink&gt; HTML element that causes a string to blink.","y":"str.blink()","p":null},"bold":{"s":"The bold() method creates a &lt;b&gt; HTML element that causes a string to be displayed as bold.","y":"str.bold()","p":null},"fixed":{"s":"The fixed() method creates a &lt;tt&gt; HTML element that causes a string to be displayed in fixed-pitch font.","y":"str.fixed() ","p":null},"fontcolor":{"s":"The fontcolor(color) method creates a &lt;font&gt; HTML element that causes a string to be displayed in the specified font color.","y":"str.fontcolor(color)","p":[{"t":"color","d":"A string expressing the color as a hexadecimal RGB triplet or as a string literal. String literals for color names are listed in the CSS color reference."}]},"fontsize":{"s":"The fontsize() method creates a &lt;font&gt; HTML element that causes a string to be displayed in the specified font size.","y":"str.fontsize(size)","p":[{"t":"size","d":"An integer between 1 and 7, a string representing a signed integer between 1 and 7."}]},"italics":{"s":"The italics() method creates an &lt;i&gt; HTML element that causes a string to be italic.","y":"str.italics()","p":null},"link":{"s":"The link() method creates an &lt;a&gt; HTML element that causes a string to be displayed as a hypertext link to another URL.","y":"str.link(url) ","p":[{"t":"url","d":"Any string that specifies the href attribute of the a tag; it should be a valid URL (relative or absolute), with any &amp; characters escaped as &amp;amp;, and any \" characters escaped as &amp;quot;."}]},"small":{"s":"The small() method creates a &lt;small&gt; HTML element that causes a string to be displayed in a small font.","y":"str.small()","p":null},"strike":{"s":"The strike() method creates a &lt;strike&gt; HTML element that causes a string to be displayed as struck-out text.","y":"str.strike()","p":null},"sub":{"s":"The sub() method creates a &lt;sub&gt; HTML element that causes a string to be displayed as subscript.","y":"str.sub()","p":null},"sup":{"s":"The sup() method creates a &lt;sup&gt; HTML element that causes a string to be displayed as superscript.","y":"str.sup()","p":null}}