{"block":{"s":"A block statement is used to group zero or more statements. The block is delimited by a pair of curly brackets.","y":"{\n  <var>statement_1<\/var>\n  <var>statement_2<\/var>\n  ...\n  <var>statement_n<\/var>\n}\n","p":[{"t":"statement_1","d":"Statements grouped within the block statement."}]},"break":{"s":"Terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.","y":"<code>break [label];<\/code>","p":[{"t":"label","d":"Identifier associated with the label of the statement.\u00a0 If the statement is not a loop or switch, this is required."}]},"const":{"s":"Declares a read-only named constant.","y":"const <em>name1 = <em>value1 [<\/em>, <em>name2<\/em> = <em>value2 [<\/em>, <em>name3<\/em> = <em>value3 [<\/em>, ... [<\/em>, <em>nameN<\/em> = <em>valueN]]]]<\/em>;","p":[{"t":"nameN","d":"Constant name. It can be any legal identifier."},{"t":"valueN","d":"Value of the constant. It can be any legal expression."}]},"continue":{"s":"Terminates execution of the statements in the current iteration of the current or labelled loop, and continues execution of the loop with the next iteration.","y":null,"p":[{"t":"label","d":"Identifier associated with the label of the statement."}]},"debugger":{"s":"Invokes any available debugging functionality. If no debugging functionality is available, this statement has no effect.","y":"<code>debugger;<\/code>","p":null},"do___while":{"s":"Creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.","y":"do\n   <em>statement<\/em>\nwhile (<em>condition<\/em>);\n","p":[{"t":"statement","d":"A statement that is executed at least once and is re-executed each time the condition evaluates to true. To execute multiple statements within the loop, use a block statement ({ ... }) to group those statements."},{"t":"condition","d":"An expression evaluated after each pass through the loop. If condition evaluates to true, the statement is re-executed. When condition evaluates to false, control passes to the statement following the do...while."}]},"export":{"s":"Allows a signed script to provide properties, functions, and objects to other signed or unsigned scripts. This feature is not in ECMA-262, Edition 3.","y":null,"p":[{"t":"nameN","d":"Property, function, or object to be exported."}]},"for":{"s":"Creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement executed in the loop.","y":"for ([<em>initialization<\/em>]; [<em>condition<\/em>]; [<em>final-expression<\/em>])\n   <em>statement<\/em>\n","p":[{"t":"initialization","d":"An expression (including assignment expressions) or variable declaration. Typically used to initialize a counter variable. This expression may optionally declare new variables with the var keyword. These variables are not local to the loop, i.e. they are in the same scope the for loop is in. The result of this expression is discarded."},{"t":"condition","d":"An expression to be evaluated before each loop iteration. If this expression evaluates to true, statement is executed. This conditional test is optional. If omitted, the condition always evaluates to true. If the expression evaluates to false, execution skips to the first expression following the for construct."},{"t":"final-expression","d":"An expression to be evaluated at the end of each loop iteration. This occurs before the next evaluation of condition. Generally used to update or increment the counter variable."},{"t":"statement","d":"A statement that is executed as long as the condition evaluates to true. To execute multiple statements within the loop, use a block statement ({ ... }) to group those statements."}]},"for_each___in":{"s":"","y":null,"p":null},"for___in":{"s":"Iterates over the enumerable properties of an object, in arbitrary order. For each distinct property, statements can be executed.","y":"for (<var>variable<\/var> in <var>object<\/var>) {\n  <i>...<\/i>\n}","p":[{"t":"variable","d":"A different property name is assigned to variable on each iteration."},{"t":"object","d":"Object whose enumerable properties are iterated."}]},"for___of":{"s":"Iterates over iterable objects (including arrays, array-like objects, iterators and generators), invoking a custom iteration hook with statements to be executed for the value of each distinct property.","y":"for (<em>variable<\/em> of <em>object<\/em>)\n  <em>statement<\/em>\n","p":[{"t":"variable","d":"On each iteration a value of a different property is assigned to variable."},{"t":"object","d":"Object whose enumerable properties are iterated."}]},"function":{"s":"Declares a function with the specified parameters.","y":"function <em>[name]<\/em>([<em>param<\/em>,[, <em>param<\/em>,[..., <em>param<\/em>]]]) {\n   <em>statements<\/em>\n}\n","p":[{"t":"name","d":"The function name."},{"t":"param","d":"The name of an argument to be passed to the function. A function can have up to 255 arguments."},{"t":"statements","d":"The statements which comprise the body of the function."}]},"if___else":{"s":"Executes a statement if a specified condition is true. If the condition is false, another statement can be executed.","y":"if (<em>condition<\/em>)\n   <em>statement1<\/em>\n[else\n   <em>statement2<\/em>]\n","p":[{"t":"condition","d":"An expression that evaluates to true or false."},{"t":"statement1","d":"Statement that is executed if condition evaluates to true. Can be any statement, including further nested if statements. To execute multiple statements, use a block statement ({ ... }) to group those statements."},{"t":"statement2","d":"Statement that is executed if condition evaluates to false and the else clause exists. Can be any statement, including block statements and further nested if statements."}]},"import":{"s":"Allows a script to import properties, functions, and objects from a signed script that has exported the information. This feature is not in ECMA 262, Edition 3.","y":null,"p":[{"t":"objectName","d":"Name of the object that will receive the imported names."},{"t":"nameN","d":"Property, function, or object to be imported."}]},"label":{"s":"Provides a statement with an identifier that you can refer to using a break or continue statement.","y":"<em>label<\/em> :\n   <em>statement<\/em>\n","p":[{"t":"label","d":"Any JavaScript identifier that is not a reserved word."},{"t":"statement","d":"Statements. break can be used with any labeled statement, and continue can be used with looping labeled statements."}]},"let":{"s":"Declares a block scope local variable, optionally initializing it to a value.","y":"let var1 [= value1] [, var2 [= value2]] [, ..., varN [= valueN]];","p":null},"return":{"s":"Specifies the value to be returned by a function.","y":null,"p":[{"t":"expression","d":"The expression to return. If omitted, undefined is returned instead."}]},"switch":{"s":"Evaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case.","y":"switch (<em>expression<\/em>) {\n  case expression1:\n    <em>statements1<\/em>\n    [break;]\n  case expression2:\n    <em>statements2<\/em>\n    [break;]\n  ...\n  case expressionN:\n    <em>statementsN<\/em>\n    [break;]\n  default:\n    <em>statements_def<\/em>\n    [break;]\n}","p":[{"t":"expression","d":"An expression matched against each case clause."},{"t":"case expressionN","d":"A case clause used to match against expression."},{"t":"statementsN","d":"Statements that are executed if expression matches the associated case clause."},{"t":"statements_def","d":"Statements that are executed if expression does not match any case clause."}]},"throw":{"s":"Throws a user-defined exception.","y":null,"p":[{"t":"expression","d":"The expression to throw."}]},"try___catch":{"s":"Marks a block of statements to try, and specifies a response, should an exception be thrown.","y":"try {\n   <em>try_statements<\/em>\n}\n[catch (<em>exception_var_1<\/em> if <em>condition_1<\/em>) {\n   <em>catch_statements_1<\/em>\n}]\n...\n[catch (<em>exception_var_2<\/em>) {\n   <em>catch_statements_2<\/em>\n}]\n[finally {\n   <em>finally_statements<\/em>\n}]\n","p":[{"t":"try_statements","d":"The statements to be executed."},{"t":"catch_statements_1","d":"Statements that are executed if an exception is thrown in the try block."},{"t":"exception_var_1","d":"An identifier to hold an exception object for the associated catch clause."},{"t":"condition_1","d":"A conditional expression."},{"t":"finally_statements","d":"Statements that are executed after the try statement completes. These statements execute regardless of whether or not an exception was thrown or caught."}]},"var":{"s":"Declares a variable, optionally initializing it to a value.","y":"var a = 1;\nb = 2;\n\ndelete this.a; \/\/ Throws a TypeError in strict mode. Fails silently otherwise.\ndelete this.b;\n\nconsole.log(a, b); \/\/ Throws a ReferenceError. Since the 'b' property doesn't exist in the global object,\n\/\/ the 'b' variable stops being a variable\n","p":[{"t":"varnameN","d":"Variable name. It can be any legal identifier."},{"t":"valueN","d":"Initial value of the variable. It can be any legal expression."}]},"while":{"s":"Creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.","y":"while (<em>condition<\/em>) {\n  <em>statement<\/em>\n}","p":[{"t":"condition","d":"An expression evaluated before each pass through the loop. If this condition evaluates to true, statement is executed. When condition evaluates to false, execution continues with the statement after the while loop."},{"t":"statement","d":"A statement that is executed as long as the condition evaluates to true. To execute multiple statements within the loop, use a block statement ({ ... }) to group those statements."}]},"with":{"s":"Extends the scope chain for a statement.","y":"with (<em>object<\/em>) {\n  <em>statement<\/em>\n}\n","p":[{"t":"object","d":"Adds the given object to the scope chain used when evaluating the statement. The parentheses around object are required."},{"t":"statement","d":"Any statement. To execute multiple statements, use a block statement ({ ... }) to group those statements."}]},"yield":{"s":"See\u00a0New_in_JavaScript 1.7\u00a0&amp;\u00a0Iterators and generators","y":null,"p":null}}