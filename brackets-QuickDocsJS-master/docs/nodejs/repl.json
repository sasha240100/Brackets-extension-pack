{"start":{"y":"repl.start(options)","s":"<p>Returns and starts a <code>REPLServer<\/code> instance. Accepts an &quot;options&quot; Object that\ntakes the following values:\n\n<\/p>\n<ul>\n<li><p><code>prompt<\/code> - the prompt and <code>stream<\/code> for all I\/O. Defaults to <code>&gt; <\/code>.<\/p>\n<\/li>\n<li><p><code>input<\/code> - the readable stream to listen to. Defaults to <code>process.stdin<\/code>.<\/p>\n<\/li>\n<li><p><code>output<\/code> - the writable stream to write readline data to. Defaults to\n<code>process.stdout<\/code>.<\/p>\n<\/li>\n<li><p><code>terminal<\/code> - pass <code>true<\/code> if the <code>stream<\/code> should be treated like a TTY, and\nhave ANSI\/VT100 escape codes written to it. Defaults to checking <code>isTTY<\/code>\non the <code>output<\/code> stream upon instantiation.<\/p>\n<\/li>\n<li><p><code>eval<\/code> - function that will be used to eval each given line. Defaults to\nan async wrapper for <code>eval()<\/code>. See below for an example of a custom <code>eval<\/code>.<\/p>\n<\/li>\n<li><p><code>useColors<\/code> - a boolean which specifies whether or not the <code>writer<\/code> function\nshould output colors. If a different <code>writer<\/code> function is set then this does\nnothing. Defaults to the repl&#39;s <code>terminal<\/code> value.<\/p>\n<\/li>\n<li><p><code>useGlobal<\/code> - if set to <code>true<\/code>, then the repl will use the <code>global<\/code> object,\ninstead of running scripts in a separate context. Defaults to <code>false<\/code>.<\/p>\n<\/li>\n<li><p><code>ignoreUndefined<\/code> - if set to <code>true<\/code>, then the repl will not output the\nreturn value of command if it&#39;s <code>undefined<\/code>. Defaults to <code>false<\/code>.<\/p>\n<\/li>\n<li><p><code>writer<\/code> - the function to invoke for each command that gets evaluated which\nreturns the formatting (including coloring) to display. Defaults to\n<code>util.inspect<\/code>.<\/p>\n<\/li>\n<\/ul>\n<p>You can use your own <code>eval<\/code> function if it has following signature:\n\n<\/p>\n<pre><code>function eval(cmd, context, filename, callback) {\n  callback(null, result);\n}<\/code><\/pre>\n<p>Multiple REPLs may be started against the same running instance of node.  Each\nwill share the same global object but will have unique I\/O.\n\n<\/p>\n<p>Here is an example that starts a REPL on stdin, a Unix socket, and a TCP socket:\n\n<\/p>\n<pre><code>var net = require(&quot;net&quot;),\n    repl = require(&quot;repl&quot;);\n\nconnections = 0;\n\nrepl.start({\n  prompt: &quot;node via stdin&gt; &quot;,\n  input: process.stdin,\n  output: process.stdout\n});\n\nnet.createServer(function (socket) {\n  connections += 1;\n  repl.start({\n    prompt: &quot;node via Unix socket&gt; &quot;,\n    input: socket,\n    output: socket\n  }).on(&#39;exit&#39;, function() {\n    socket.end();\n  })\n}).listen(&quot;\/tmp\/node-repl-sock&quot;);\n\nnet.createServer(function (socket) {\n  connections += 1;\n  repl.start({\n    prompt: &quot;node via TCP socket&gt; &quot;,\n    input: socket,\n    output: socket\n  }).on(&#39;exit&#39;, function() {\n    socket.end();\n  });\n}).listen(5001);<\/code><\/pre>\n<p>Running this program from the command line will start a REPL on stdin.  Other\nREPL clients may connect through the Unix socket or TCP socket. <code>telnet<\/code> is useful\nfor connecting to TCP sockets, and <code>socat<\/code> can be used to connect to both Unix and\nTCP sockets.\n\n<\/p>\n<p>By starting a REPL from a Unix socket-based server instead of stdin, you can\nconnect to a long-running node process without restarting it.\n\n<\/p>\n<p>For an example of running a &quot;full-featured&quot; (<code>terminal<\/code>) REPL over\na <code>net.Server<\/code> and <code>net.Socket<\/code> instance, see: <a href=\"https:\/\/gist.github.com\/2209310\">https:\/\/gist.github.com\/2209310<\/a>\n\n<\/p>\n<p>For an example of running a REPL instance over <code>curl(1)<\/code>,\nsee: <a href=\"https:\/\/gist.github.com\/2053342\">https:\/\/gist.github.com\/2053342<\/a>\n\n<\/p>\n","p":[{"o":false,"t":"options","d":"","type":""}]}}
