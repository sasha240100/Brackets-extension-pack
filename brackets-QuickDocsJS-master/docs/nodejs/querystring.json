{"stringify":{"y":"querystring.stringify(obj, [sep], [eq])","s":"<p>Serialize an object to a query string.\nOptionally override the default separator (<code>&#39;&amp;&#39;<\/code>) and assignment (<code>&#39;=&#39;<\/code>)\ncharacters.\n\n<\/p>\n<p>Example:\n\n<\/p>\n<pre><code>querystring.stringify({ foo: &#39;bar&#39;, baz: [&#39;qux&#39;, &#39;quux&#39;], corge: &#39;&#39; })\n\/\/ returns\n&#39;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge=&#39;\n\nquerystring.stringify({foo: &#39;bar&#39;, baz: &#39;qux&#39;}, &#39;;&#39;, &#39;:&#39;)\n\/\/ returns\n&#39;foo:bar;baz:qux&#39;<\/code><\/pre>\n","p":[{"o":false,"t":"obj","d":"","type":""},{"o":true,"t":"sep","d":"","type":""},{"o":true,"t":"eq","d":"","type":""}]},"parse":{"y":"querystring.parse(str, [sep], [eq], [options])","s":"<p>Deserialize a query string to an object.\nOptionally override the default separator (<code>&#39;&amp;&#39;<\/code>) and assignment (<code>&#39;=&#39;<\/code>)\ncharacters.\n\n<\/p>\n<p>Options object may contain <code>maxKeys<\/code> property (equal to 1000 by default), it&#39;ll\nbe used to limit processed keys. Set it to 0 to remove key count limitation.\n\n<\/p>\n<p>Example:\n\n<\/p>\n<pre><code>querystring.parse(&#39;foo=bar&amp;baz=qux&amp;baz=quux&amp;corge&#39;)\n\/\/ returns\n{ foo: &#39;bar&#39;, baz: [&#39;qux&#39;, &#39;quux&#39;], corge: &#39;&#39; }<\/code><\/pre>\n","p":[{"o":false,"t":"str","d":"","type":""},{"o":true,"t":"sep","d":"","type":""},{"o":true,"t":"eq","d":"","type":""},{"o":true,"t":"options","d":"","type":""}]}}
