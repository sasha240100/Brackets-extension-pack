{"setupMaster":{"y":"cluster.setupMaster([settings])","s":"<p><code>setupMaster<\/code> is used to change the default &#39;fork&#39; behavior. Once called,\nthe settings will be present in <code>cluster.settings<\/code>.\n\n<\/p>\n<p>Note that:\n\n<\/p>\n<ul>\n<li>Only the first call to <code>.setupMaster()<\/code> has any effect, subsequent calls are\nignored<\/li>\n<li>That because of the above, the <em>only<\/em> attribute of a worker that may be\ncustomized per-worker is the <code>env<\/code> passed to <code>.fork()<\/code><\/li>\n<li><code>.fork()<\/code> calls <code>.setupMaster()<\/code> internally to establish the defaults, so to\nhave any effect, <code>.setupMaster()<\/code> must be called <em>before<\/em> any calls to\n<code>.fork()<\/code><\/li>\n<\/ul>\n<p>Example:\n\n<\/p>\n<pre><code>var cluster = require(&quot;cluster&quot;);\ncluster.setupMaster({\n  exec : &quot;worker.js&quot;,\n  args : [&quot;--use&quot;, &quot;https&quot;],\n  silent : true\n});\ncluster.fork();<\/code><\/pre>\n<p>This can only be called from the master process.\n\n<\/p>\n","p":[{"o":true,"t":"settings","d":"","type":"Object"}]},"fork":{"y":"cluster.fork([env])","s":"<p>Spawn a new worker process.\n\n<\/p>\n<p>This can only be called from the master process.\n\n<\/p>\n","p":[{"o":true,"t":"env","d":"Key\/value pairs to add to worker process environment.","type":"Object"}]},"disconnect":{"y":"cluster.disconnect([callback])","s":"<p>Calls <code>.disconnect()<\/code> on each worker in <code>cluster.workers<\/code>.\n\n<\/p>\n<p>When they are disconnected all internal handles will be closed, allowing the\nmaster process to die gracefully if no other event is waiting.\n\n<\/p>\n<p>The method takes an optional callback argument which will be called when finished.\n\n<\/p>\n<p>This can only be called from the master process.\n\n<\/p>\n","p":[{"o":true,"t":"callback","d":"called when all workers are disconnected and handles are closed","type":"Function"}]}}
