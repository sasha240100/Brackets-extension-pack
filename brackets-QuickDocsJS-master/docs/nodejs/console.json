{"log":{"y":"console.log([data], [...])","s":"<p>Prints to stdout with newline. This function can take multiple arguments in a\n<code>printf()<\/code>-like way. Example:\n\n<\/p>\n<pre><code>console.log(&#39;count: %d&#39;, count);<\/code><\/pre>\n<p>If formatting elements are not found in the first string then <code>util.inspect<\/code>\nis used on each argument.  See [util.format()][] for more information.\n\n<\/p>\n","p":[{"o":true,"t":"data","d":"","type":""},{"o":true,"t":"...","d":"","type":""}]},"info":{"y":"console.info([data], [...])","s":"<p>Same as <code>console.log<\/code>.\n\n<\/p>\n","p":[{"o":true,"t":"data","d":"","type":""},{"o":true,"t":"...","d":"","type":""}]},"error":{"y":"console.error([data], [...])","s":"<p>Same as <code>console.log<\/code> but prints to stderr.\n\n<\/p>\n","p":[{"o":true,"t":"data","d":"","type":""},{"o":true,"t":"...","d":"","type":""}]},"warn":{"y":"console.warn([data], [...])","s":"<p>Same as <code>console.error<\/code>.\n\n<\/p>\n","p":[{"o":true,"t":"data","d":"","type":""},{"o":true,"t":"...","d":"","type":""}]},"dir":{"y":"console.dir(obj)","s":"<p>Uses <code>util.inspect<\/code> on <code>obj<\/code> and prints resulting string to stdout.\n\n<\/p>\n","p":[{"o":false,"t":"obj","d":"","type":""}]},"time":{"y":"console.time(label)","s":"<p>Mark a time.\n\n<\/p>\n","p":[{"o":false,"t":"label","d":"","type":""}]},"timeEnd":{"y":"console.timeEnd(label)","s":"<p>Finish timer, record output. Example:\n\n<\/p>\n<pre><code>console.time(&#39;100-elements&#39;);\nfor (var i = 0; i &lt; 100; i++) {\n  ;\n}\nconsole.timeEnd(&#39;100-elements&#39;);<\/code><\/pre>\n","p":[{"o":false,"t":"label","d":"","type":""}]},"trace":{"y":"console.trace(message, [...])","s":"<p>Print to stderr <code>&#39;Trace :&#39;<\/code>, followed by the formatted message and stack trace\nto the current position.\n\n<\/p>\n","p":[{"o":false,"t":"message","d":"","type":""},{"o":true,"t":"...","d":"","type":""}]},"assert":{"y":"console.assert(value, [message], [...])","s":"<p>Similar to [assert.ok()][], but the error message is formatted as\n<code>util.format(message...)<\/code>.\n\n<\/p>\n","p":[{"o":false,"t":"value","d":"","type":""},{"o":true,"t":"message","d":"","type":""},{"o":true,"t":"...","d":"","type":""}]}}
