{"createServer":{"y":"net.createServer([options], [connectionListener])","s":"<p>Creates a new TCP server. The <code>connectionListener<\/code> argument is\nautomatically set as a listener for the [&#39;connection&#39;][] event.\n\n<\/p>\n<p><code>options<\/code> is an object with the following defaults:\n\n<\/p>\n<pre><code>{ allowHalfOpen: false\n}<\/code><\/pre>\n<p>If <code>allowHalfOpen<\/code> is <code>true<\/code>, then the socket won&#39;t automatically send a FIN\npacket when the other end of the socket sends a FIN packet. The socket becomes\nnon-readable, but still writable. You should call the <code>end()<\/code> method explicitly.\nSee [&#39;end&#39;][] event for more information.\n\n<\/p>\n<p>Here is an example of an echo server which listens for connections\non port 8124:\n\n<\/p>\n<pre><code>var net = require(&#39;net&#39;);\nvar server = net.createServer(function(c) { \/\/&#39;connection&#39; listener\n  console.log(&#39;server connected&#39;);\n  c.on(&#39;end&#39;, function() {\n    console.log(&#39;server disconnected&#39;);\n  });\n  c.write(&#39;hello\\r\\n&#39;);\n  c.pipe(c);\n});\nserver.listen(8124, function() { \/\/&#39;listening&#39; listener\n  console.log(&#39;server bound&#39;);\n});<\/code><\/pre>\n<p>Test this by using <code>telnet<\/code>:\n\n<\/p>\n<pre><code>telnet localhost 8124<\/code><\/pre>\n<p>To listen on the socket <code>\/tmp\/echo.sock<\/code> the third line from the last would\njust be changed to\n\n<\/p>\n<pre><code>server.listen(&#39;\/tmp\/echo.sock&#39;, function() { \/\/&#39;listening&#39; listener<\/code><\/pre>\n<p>Use <code>nc<\/code> to connect to a UNIX domain socket server:\n\n<\/p>\n<pre><code>nc -U \/tmp\/echo.sock<\/code><\/pre>\n","p":[{"o":true,"t":"options","d":"","type":""},{"o":true,"t":"connectionListener","d":"","type":""}]},"connect":{"y":"net.connect(path, [connectListener])","s":"<p>Creates unix socket connection to <code>path<\/code>.\nThe <code>connectListener<\/code> parameter will be added as an listener for the\n[&#39;connect&#39;][] event.\n\n<\/p>\n<p>A factory method which returns a new <a href=\"#net_class_net_socket\">&#39;net.Socket&#39;<\/a>.\n\n<\/p>\n","p":[{"o":false,"t":"path","d":"","type":""},{"o":true,"t":"connectListener","d":"","type":""}]},"createConnection":{"y":"net.createConnection(path, [connectListener])","s":"<p>Creates unix socket connection to <code>path<\/code>.\nThe <code>connectListener<\/code> parameter will be added as an listener for the\n[&#39;connect&#39;][] event.\n\n<\/p>\n<p>A factory method which returns a new <a href=\"#net_class_net_socket\">&#39;net.Socket&#39;<\/a>.\n\n<\/p>\n","p":[{"o":false,"t":"path","d":"","type":""},{"o":true,"t":"connectListener","d":"","type":""}]},"isIP":{"y":"net.isIP(input)","s":"<p>Tests if input is an IP address. Returns 0 for invalid strings,\nreturns 4 for IP version 4 addresses, and returns 6 for IP version 6 addresses.\n\n\n<\/p>\n","p":[{"o":false,"t":"input","d":"","type":""}]},"isIPv4":{"y":"net.isIPv4(input)","s":"<p>Returns true if input is a version 4 IP address, otherwise returns false.\n\n\n<\/p>\n","p":[{"o":false,"t":"input","d":"","type":""}]},"isIPv6":{"y":"net.isIPv6(input)","s":"<p>Returns true if input is a version 6 IP address, otherwise returns false.\n\n<\/p>\n","p":[{"o":false,"t":"input","d":"","type":""}]}}
