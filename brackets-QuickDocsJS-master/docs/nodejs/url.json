{"parse":{"y":"url.parse(urlStr, [parseQueryString], [slashesDenoteHost])","s":"<p>Take a URL string, and return an object.\n\n<\/p>\n<p>Pass <code>true<\/code> as the second argument to also parse\nthe query string using the <code>querystring<\/code> module.\nDefaults to <code>false<\/code>.\n\n<\/p>\n<p>Pass <code>true<\/code> as the third argument to treat <code>\/\/foo\/bar<\/code> as\n<code>{ host: &#39;foo&#39;, pathname: &#39;\/bar&#39; }<\/code> rather than\n<code>{ pathname: &#39;\/\/foo\/bar&#39; }<\/code>. Defaults to <code>false<\/code>.\n\n<\/p>\n","p":[{"o":false,"t":"urlStr","d":"","type":""},{"o":true,"t":"parseQueryString","d":"","type":""},{"o":true,"t":"slashesDenoteHost","d":"","type":""}]},"format":{"y":"url.format(urlObj)","s":"<p>Take a parsed URL object, and return a formatted URL string.\n\n<\/p>\n<ul>\n<li><code>href<\/code> will be ignored.<\/li>\n<li><code>protocol<\/code> is treated the same with or without the trailing <code>:<\/code> (colon).<ul>\n<li>The protocols <code>http<\/code>, <code>https<\/code>, <code>ftp<\/code>, <code>gopher<\/code>, <code>file<\/code> will be\npostfixed with <code>:\/\/<\/code> (colon-slash-slash).<\/li>\n<li>All other protocols <code>mailto<\/code>, <code>xmpp<\/code>, <code>aim<\/code>, <code>sftp<\/code>, <code>foo<\/code>, etc will\nbe postfixed with <code>:<\/code> (colon)<\/li>\n<\/ul>\n<\/li>\n<li><code>slashes<\/code> set to <code>true<\/code> if the protocol requires <code>:\/\/<\/code> (colon-slash-slash)<ul>\n<li>Only needs to be set for protocols not previously listed as requiring\nslashes, such as <code>mongodb:\/\/localhost:8000\/<\/code><\/li>\n<\/ul>\n<\/li>\n<li><code>auth<\/code> will be used if present.<\/li>\n<li><code>hostname<\/code> will only be used if <code>host<\/code> is absent.<\/li>\n<li><code>port<\/code> will only be used if <code>host<\/code> is absent.<\/li>\n<li><code>host<\/code> will be used in place of <code>hostname<\/code> and <code>port<\/code><\/li>\n<li><code>pathname<\/code> is treated the same with or without the leading <code>\/<\/code> (slash)<\/li>\n<li><code>search<\/code> will be used in place of <code>query<\/code><\/li>\n<li><code>query<\/code> (object; see <code>querystring<\/code>) will only be used if <code>search<\/code> is absent.<\/li>\n<li><code>search<\/code> is treated the same with or without the leading <code>?<\/code> (question mark)<\/li>\n<li><code>hash<\/code> is treated the same with or without the leading <code>#<\/code> (pound sign, anchor)<\/li>\n<\/ul>\n","p":[{"o":false,"t":"urlObj","d":"","type":""}]},"resolve":{"y":"url.resolve(from, to)","s":"<p>Take a base URL, and a href URL, and resolve them as a browser would for\nan anchor tag.  Examples:\n\n<\/p>\n<pre><code>url.resolve(&#39;\/one\/two\/three&#39;, &#39;four&#39;)         \/\/ &#39;\/one\/two\/four&#39;\nurl.resolve(&#39;http:\/\/example.com\/&#39;, &#39;\/one&#39;)    \/\/ &#39;http:\/\/example.com\/one&#39;\nurl.resolve(&#39;http:\/\/example.com\/one&#39;, &#39;\/two&#39;) \/\/ &#39;http:\/\/example.com\/two&#39;<\/code><\/pre>\n","p":[{"o":false,"t":"from","d":"","type":""},{"o":false,"t":"to","d":"","type":""}]}}
