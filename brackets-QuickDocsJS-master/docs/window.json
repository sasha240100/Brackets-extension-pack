{"addEventListener":{"s":"","y":null,"p":null},"alert":{"s":"The Window.alert() method displays an alert dialog with the optional specified content and an OK button.","y":"window.alert(<em>message<\/em>);","p":null},"atob":{"s":"","y":null,"p":null},"back":{"s":"Returns the window to the previous item in the history. This was a Gecko-specific method. Use the standard history.back method instead.","y":null,"p":null},"blur":{"s":"Shifts focus away from the window.","y":"<code>window.blur()<\/code>","p":null},"btoa":{"s":"","y":null,"p":null},"captureEvents":{"s":"Registers the window to capture all events of the specified type.","y":"window.captureEvents(<em>eventType<\/em>) \n","p":null},"clearImmediate":{"s":"This method clears the action specified by window.setImmediate.","y":"window.clearImmediate(immediateID)\n","p":null},"clearInterval":{"s":"","y":null,"p":null},"clearTimeout":{"s":"","y":null,"p":null},"close":{"s":"Closes the current window, or a referenced window.","y":"<em>window<\/em>.close();\n","p":null},"confirm":{"s":"The Window.confirm() method displays a modal dialog with an optional message and two buttons, OK and Cancel.","y":"<i>result<\/i> = window.confirm(<i>message<\/i>);\n","p":null},"dispatchEvent":{"s":"See EventTarget.dispatchEvent","y":null,"p":null},"dump":{"s":"Prints messages to the (native) console.","y":"window.dump(<em>message<\/em>);\n\ndump(<em>message<\/em>);\n","p":null},"find":{"s":"Finds a string in a window.","y":"<em>window<\/em>.find(<em>aString<\/em>, <em>aCaseSensitive<\/em>, <em>aBackwards<\/em>, <em>aWrapAround<\/em>,\n            <em>aWholeWord<\/em>, <em>aSearchInFrames<\/em>, <em>aShowDialog<\/em>);","p":null},"focus":{"s":"Makes a request to bring the window to the front. It may fail due to user settings and the window isn't guaranteed to be frontmost before this method returns.","y":null,"p":null},"forward":{"s":"Moves the window one document forward in the history. This was a Gecko-specific method. Use the standard history.forward method instead.","y":"window.forward() \n","p":null},"getAttention":{"s":"Attempts to get the user's attention. How this happens varies based on OS and window manager.","y":"window.getAttention();\n","p":null},"getComputedStyle":{"s":"The Window.getComputedStyle() method gives the values of all the CSS properties of an element after applying the active stylesheets and resolving any basic computation those values may contain.","y":"var <em>style<\/em> = window.getComputedStyle(<em>element<\/em>[, <em>pseudoElt<\/em>]);\n","p":null},"getSelection":{"s":"Returns a selection object representing the range of text selected by the user. ","y":"<em>selection<\/em> = <em>window<\/em>.getSelection() ;","p":null},"home":{"s":"Returns the window to the home page.","y":"window.home() \n","p":null},"matchMedia":{"s":"Returns a new MediaQueryList object representing the parsed results of the specified media query string.","y":"<em>mql<\/em> = window.matchMedia(<em>mediaQueryString<\/em>)","p":null},"minimize":{"s":"Sets a window to minimized state (a way to undo it programatically is by calling window.moveTo()).","y":null,"p":null},"moveBy":{"s":"Moves the current window by a specified amount.","y":"window.moveBy(<em>deltaX<\/em>, <em>deltaY<\/em>) \n","p":null},"moveTo":{"s":"Moves the window to the specified coordinates.","y":"window.moveTo(<var>x<\/var>, <var>y<\/var>) \n","p":null},"mozRequestAnimationFrame":{"s":"","y":null,"p":null},"open":{"s":"Loads a resource into either a new browsing context (such as a window) or one that already exists, depending on the specified parameters.","y":"<code>var <var>windowObjectReference<\/var> = window.open(<var>strUrl<\/var>, <var>strWindowName<\/var>, [<var>strWindowFeatures<\/var>]);<\/code>","p":null},"openDialog":{"s":"window.openDialog is an extension to window.open. It behaves the same, except that it can optionally take one or more parameters past windowFeatures, and windowFeatures itself is treated a little differently.","y":"<em>newWindow<\/em> = openDialog(<em>url<\/em>, <em>name<\/em>, <em>features<\/em>, <em>arg1<\/em>, <em>arg2<\/em>, ...) \n","p":[{"t":"","d":"The opened window"},{"t":"","d":"The URL to be loaded in the newly opened window."},{"t":"","d":"The window name (optional). See window.open description for detailed information."},{"t":"","d":"See window.open description for description."},{"t":"all","d":"The arguments to be passed to the new window (optional)."}]},"postMessage":{"s":"The window.postMessage method safely enables cross-origin communication. Normally, scripts on different pages are allowed to access each other if and only if the pages that executed them are at locations with the same protocol (usually both http), port number (80 being the default for http), and host (modulo document.domain being set by both pages to the same value). window.postMessage provides a controlled mechanism to circumvent this restriction in a way which is secure when properly used.","y":"<em>otherWindow<\/em>.postMessage(<em>message<\/em>, <em>targetOrigin<\/em>, [<em>transfer<\/em>]);","p":null},"print":{"s":"Opens the Print Dialog to print the current document.","y":"window.print() \n","p":null},"prompt":{"s":"The Window.prompt() displays a dialog with an optional message prompting the user to input some text.","y":"<em>result<\/em> = window.prompt(<em>text<\/em>, <em>value<\/em>);\n","p":null},"releaseEvents":{"s":"Releases the window from trapping events of a specific type.","y":"window.releaseEvents(<i>eventType<\/i>) \n","p":null},"resizeBy":{"s":"Resizes the current window by a certain amount.","y":"window.resizeBy(<em>xDelta<\/em>, <em>yDelta<\/em>) \n","p":null},"resizeTo":{"s":"Dynamically resizes window.","y":"window.resizeTo(<em>aWidth<\/em>, <em>aHeight<\/em>) \n","p":null},"restore":{"s":"This method is currently not working, but you can use:","y":null,"p":null},"scroll":{"s":"Scrolls the window to a particular place in the document.","y":"window.scroll(<i>x-coord<\/i>,<i>y-coord<\/i>) \n","p":null},"scrollBy":{"s":"Scrolls the document in the window by the given amount.","y":"window.scrollBy(<i>X<\/i>,<i>Y<\/i>);\n","p":null},"scrollByLines":{"s":"Scrolls the document by the given number of lines.","y":"window.scrollByLines(<var>lines<\/var>) \n","p":null},"scrollByPages":{"s":"Scrolls the current document by the specified number of pages.","y":"window.scrollByPages(<em>pages<\/em>) \n","p":null},"scrollTo":{"s":"Scrolls to a particular set of coordinates in the document.","y":"<code>window.scrollTo(<i>x-coord<\/i>,<i>y-coord<\/i> )<\/code>","p":null},"setCursor":{"s":"Changes the cursor for the current window.","y":null,"p":null},"setImmediate":{"s":"This method is used to break up long running operations and run a callback function immediately after the browser has completed other operations such as events and display updates.","y":null,"p":null},"setInterval":{"s":"","y":null,"p":null},"setTimeout":{"s":"","y":null,"p":null},"showModalDialog":{"s":"DeprecatedThis feature has been removed from the Web standards. Though some browsers may still support it, it is in the process of being dropped. Do not use it in old or new projects. Pages or Web apps using it may break at any time.","y":"<var>returnVal<\/var> = window.showModalDialog(<var>uri<\/var>[, <var>arguments<\/var>][, <var>options<\/var>]);\n","p":null},"sizeToContent":{"s":"Non-standard \n      This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.","y":"window.sizeToContent() \n","p":null},"stop":{"s":"This method stops window loading.","y":"window.stop() \n","p":null},"updateCommands":{"s":"Updates the state of commands of the current chrome window (UI).","y":"window.updateCommands(\"sCommandName\")\n","p":null}}