{"add":{"r":{"d":"","type":"Callbacks"},"s":"Add a callback or a collection of callbacks to a callback list.","y":"","p":[{"optional":false,"default":null,"t":"callbacks","d":"A function, or array of functions, that are to be added to the callback list.","type":"Function|Array"}]},"addBack":{"r":{"d":"","type":"jQuery"},"s":"Add the previous set of elements on the stack to the current set, optionally filtered by a selector.","y":"","p":[{"optional":true,"default":null,"t":"selector","d":"A string containing a selector expression to match the current set of elements against.","type":"Selector"}]},"addClass":{"r":{"d":"","type":"jQuery"},"s":"Adds the specified class(es) to each of the set of matched elements.","y":"Add the class \"selected\" to the matched elements.\n$( \"p\" ).last().addClass( \"selected\" );\n","p":[{"optional":false,"default":null,"t":"className","d":"One or more space-separated classes to be added to the class attribute of each matched element.","type":"String"}]},"after":{"r":{"d":"","type":"jQuery"},"s":"Insert content, specified by the parameter, after each element in the set of matched elements.","y":"Inserts some HTML after all paragraphs.\n$( \"p\" ).after( \"<b>Hello<\/b>\" );\n","p":[{"optional":false,"default":null,"t":"content","d":"HTML string, DOM element, array of elements, or jQuery object to insert after each element in the set of matched elements.","type":"htmlString|Element|Array|jQuery"},{"optional":true,"default":null,"t":"content","d":"One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert after each element in the set of matched elements.","type":"htmlString|Element|Array|jQuery"}]},"ajaxComplete":{"r":{"d":"","type":"jQuery"},"s":"Register a handler to be called when Ajax requests complete. This is an <ahref=\"\/Ajax_Events\/\">AjaxEvent<\/a>.","y":"","p":[{"optional":false,"default":null,"t":"handler(event, XMLHttpRequest, ajaxOptions)","d":"The function to be invoked.","type":"Function"}]},"ajaxError":{"r":{"d":"","type":"jQuery"},"s":"Register a handler to be called when Ajax requests complete with an error. This is an <ahref=\"\/Ajax_Events\/\">Ajax Event<\/a>.","y":"","p":[{"optional":false,"default":null,"t":"handler(event, jqXHR, ajaxSettings, thrownError)","d":"The function to be invoked.","type":"Function"}]},"ajaxSend":{"r":{"d":"","type":"jQuery"},"s":"Attach a function to be executed before an Ajax request is sent. This is an <ahref=\"\/Ajax_Events\/\">Ajax Event<\/a>.","y":"","p":[{"optional":false,"default":null,"t":"handler(event, jqXHR, ajaxOptions)","d":"The function to be invoked.","type":"Function"}]},"ajaxStart":{"r":{"d":"","type":"jQuery"},"s":"Register a handler to be called when the first Ajax request begins. This is an <ahref=\"\/Ajax_Events\/\">Ajax Event<\/a>.","y":"","p":[{"optional":false,"default":null,"t":"handler()","d":"The function to be invoked.","type":"Function"}]},"ajaxStop":{"r":{"d":"","type":"jQuery"},"s":"Register a handler to be called when all Ajax requests have completed. This is an <ahref=\"\/Ajax_Events\/\">Ajax Event<\/a>.","y":"","p":[{"optional":false,"default":null,"t":"handler()","d":"The function to be invoked.","type":"Function"}]},"ajaxSuccess":{"r":{"d":"","type":"jQuery"},"s":"Attach a function to be executed whenever an Ajax request completes successfully. This is an <ahref=\"\/Ajax_Events\/\">Ajax Event<\/a>.","y":"","p":[{"optional":false,"default":null,"t":"handler(event, XMLHttpRequest, ajaxOptions)","d":"The function to be invoked.","type":"Function"}]},"andSelf":{"r":{"d":"","type":"jQuery"},"s":"Add the previous set of elements on the stack to the current set.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"animate":{"r":{"d":"","type":"jQuery"},"s":"Perform a custom animation of a set of CSS properties.","y":"Click the button to animate the div with a number of different properties.\n\/\/ Using multiple unit types within one animation.\n\n$( \"#go\" ).click(function() {\n  $( \"#block\" ).animate({\n    width: \"70%\",\n    opacity: 0.4,\n    marginLeft: \"0.6in\",\n    fontSize: \"3em\",\n    borderWidth: \"10px\"\n  }, 1500 );\n});\n","p":[{"optional":false,"default":null,"t":"properties","d":"An object of CSS properties and values that the animation will move toward.","type":"PlainObject"},{"optional":true,"default":"400","t":"duration","d":"A string or number determining how long the animation will run.","type":"Number|String"},{"optional":true,"default":"swing","t":"easing","d":"A string indicating which easing function to use for the transition.","type":"String"},{"optional":true,"default":null,"t":"complete","d":"A function to call once the animation is complete.","type":"Function"}]},"append":{"r":{"d":"","type":"jQuery"},"s":"Insert content, specified by the parameter, to the end of each element in the set of matched elements.","y":"Appends some HTML to all paragraphs.\n$( \"p\" ).append( \"<strong>Hello<\/strong>\" );\n","p":[{"optional":false,"default":null,"t":"content","d":"DOM element, array of elements, HTML string, or jQuery object to insert at the end of each element in the set of matched elements.","type":"htmlString|Element|Array|jQuery"},{"optional":true,"default":null,"t":"content","d":"One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert at the end of each element in the set of matched elements.","type":"htmlString|Element|Array|jQuery"}]},"appendTo":{"r":{"d":"","type":"jQuery"},"s":"Insert every element in the set of matched elements to the end of the target.","y":"","p":[{"optional":false,"default":null,"t":"target","d":"A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the end of the element(s) specified by this parameter.","type":"Selector|htmlString|Element|Array|jQuery"}]},"attr":{"r":{"d":"","type":"String"},"s":"Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element.","y":"Display the checked attribute and property of a checkbox as it changes.\n$( \"input\" )\n  .change(function() {\n    var $input = $( this );\n    $( \"p\" ).html( \".attr( 'checked' ): <b>\" + $input.attr( \"checked\" ) + \"<\/b><br>\" +\n      \".prop( 'checked' ): <b>\" + $input.prop( \"checked\" ) + \"<\/b><br>\" +\n      \".is( ':checked' ): <b>\" + $input.is( \":checked\" ) + \"<\/b>\" );\n  })\n  .change();\n","p":[{"optional":false,"default":null,"t":"attributeName","d":"The name of the attribute to get.","type":"String"}]},"before":{"r":{"d":"","type":"jQuery"},"s":"Insert content, specified by the parameter, before each element in the set of matched elements.","y":"Inserts some HTML before all paragraphs.\n$( \"p\" ).before( \"<b>Hello<\/b>\" );\n","p":[{"optional":false,"default":null,"t":"content","d":"HTML string, DOM element, array of elements, or jQuery object to insert before each element in the set of matched elements.","type":"htmlString|Element|Array|jQuery"},{"optional":true,"default":null,"t":"content","d":"One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert before each element in the set of matched elements.","type":"htmlString|Element|Array|jQuery"}]},"bind":{"r":{"d":"","type":"jQuery"},"s":"Attach a handler to an event for the elements.","y":"Handle click and double-click for the paragraph.  Note: the coordinates are window relative, so in this case relative to the demo iframe.\n$( \"p\" ).bind( \"click\", function( event ) {\n  var str = \"( \" + event.pageX + \", \" + event.pageY + \" )\";\n  $( \"span\" ).text( \"Click happened! \" + str );\n});\n$( \"p\" ).bind( \"dblclick\", function() {\n  $( \"span\" ).text( \"Double-click happened in \" + this.nodeName );\n});\n$( \"p\" ).bind( \"mouseenter mouseleave\", function( event ) {\n  $( this ).toggleClass( \"over\" );\n});\n","p":[{"optional":false,"default":null,"t":"eventType","d":"A string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names.","type":"String"},{"optional":true,"default":null,"t":"eventData","d":"An object containing data that will be passed to the event handler.","type":"Object"},{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute each time the event is triggered.","type":"Function"}]},"blur":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to the \"blur\" JavaScript event, or trigger that event on an element.","y":"","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute each time the event is triggered.","type":"Function"}]},"change":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to the \"change\" JavaScript event, or trigger that event on an element.","y":"Attaches a change event to the select that gets the text for each selected option and writes them in the div.  It then triggers the event for the initial text draw.\n$( \"select\" )\n  .change(function () {\n    var str = \"\";\n    $( \"select option:selected\" ).each(function() {\n      str += $( this ).text() + \" \";\n    });\n    $( \"div\" ).text( str );\n  })\n  .change();\n","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute each time the event is triggered.","type":"Function"}]},"children":{"r":{"d":"","type":"jQuery"},"s":"Get the children of each element in the set of matched elements, optionally filtered by a selector.","y":"Find all children of the clicked element.\n$( \"#container\" ).click(function ( event ) {\n  $( \"*\" ).removeClass( \"hilite\" );\n  var kids = $( event.target ).children();\n  var len = kids.addClass( \"hilite\" ).length;\n\n  $( \"#results span:first\" ).text( len );\n  $( \"#results span:last\" ).text( event.target.tagName );\n\n  event.preventDefault();\n});\n","p":[{"optional":true,"default":null,"t":"selector","d":"A string containing a selector expression to match elements against.","type":"Selector"}]},"clearQueue":{"r":{"d":"","type":"jQuery"},"s":"Remove from the queue all items that have not yet been run.","y":"","p":[{"optional":true,"default":null,"t":"queueName","d":"A string containing the name of the queue. Defaults to <code>fx<\/code>, the standard effects queue.","type":"String"}]},"click":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to the \"click\" JavaScript event, or trigger that event on an element.","y":"Hide paragraphs on a page when they are clicked:\n$( \"p\" ).click(function() {\n  $( this ).slideUp();\n});\n","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute each time the event is triggered.","type":"Function"}]},"clone":{"r":{"d":"","type":"jQuery"},"s":"Create a deep copy of the set of matched elements.","y":"","p":[{"optional":true,"default":"false","t":"withDataAndEvents","d":"A Boolean indicating whether event handlers should be copied along with the elements. As of jQuery 1.4, element data will be copied as well.","type":"Boolean"}]},"closest":{"r":{"d":"","type":"jQuery"},"s":"For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.","y":"Show how event delegation can be done with closest. The closest list element toggles a yellow background when it or its descendent is clicked.\n$( document ).on( \"click\", function( event ) {\n  $( event.target ).closest( \"li\" ).toggleClass( \"hilight\" );\n});\n","p":[{"optional":false,"default":null,"t":"selector","d":"A string containing a selector expression to match elements against.","type":"Selector"}]},"contents":{"r":{"d":"","type":"jQuery"},"s":"Get the children of each element in the set of matched elements, including text and comment nodes.","y":"Find all the text nodes inside a paragraph and wrap them with a bold tag.\n$( \"p\" )\n  .contents()\n  .filter(function(){\n    return this.nodeType !== 1;\n  })\n  .wrap( \"<b><\/b>\" );\n","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"css":{"r":{"d":"","type":"String"},"s":"Get the value of a style property for the first element in the set of matched elements or set one or more CSS properties for every matched element.","y":"Get the background color of a clicked div.\n$( \"div\" ).click(function() {\n  var color = $( this ).css( \"background-color\" );\n  $( \"#result\" ).html( \"That div is <span style='color:\" +\n    color + \";'>\" + color + \"<\/span>.\" );\n});\n","p":[{"optional":false,"default":null,"t":"propertyName","d":"A CSS property.","type":"String"}]},"data":{"r":{"d":"","type":"Object"},"s":"Store arbitrary data associated with the specified element and\/or return the value that was set.","y":"","p":[{"optional":false,"default":null,"t":"element","d":"The DOM element to associate with the data.","type":"Element"},{"optional":false,"default":null,"t":"key","d":"A string naming the piece of data to set.","type":"String"},{"optional":false,"default":null,"t":"value","d":"The new data value.","type":"Object"}]},"dblclick":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to the \"dblclick\" JavaScript event, or trigger that event on an element.","y":"To bind a \"Hello World!\" alert box the dblclick event on every paragraph on the page:\n$( \"p\" ).dblclick(function() {\n  alert( \"Hello World!\" );\n});\n","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute each time the event is triggered.","type":"Function"}]},"delay":{"r":{"d":"","type":"jQuery"},"s":"Set a timer to delay execution of subsequent items in the queue.","y":"","p":[{"optional":false,"default":null,"t":"duration","d":"An integer indicating the number of milliseconds to delay execution of the next item in the queue.","type":"Integer"},{"optional":true,"default":null,"t":"queueName","d":"A string containing the name of the queue. Defaults to <code>fx<\/code>, the standard effects queue.","type":"String"}]},"delegate":{"r":{"d":"","type":"jQuery"},"s":"Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.","y":"Click a paragraph to add another. Note that .delegate() attaches a click event handler to all paragraphs - even new ones.\n$( \"body\" ).delegate( \"p\", \"click\", function() {\n  $( this ).after( \"<p>Another paragraph!<\/p>\" );\n});\n","p":[{"optional":false,"default":null,"t":"selector","d":"A selector to filter the elements that trigger the event.","type":"String"},{"optional":false,"default":null,"t":"eventType","d":"A string containing one or more space-separated JavaScript event types, such as \"click\" or \"keydown,\" or custom event names.","type":"String"},{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute at the time the event is triggered.","type":"Function"}]},"dequeue":{"r":{"d":"","type":"undefined"},"s":"Execute the next function on the queue for the matched element.","y":"","p":[{"optional":false,"default":null,"t":"element","d":"A DOM element from which to remove and execute a queued function.","type":"Element"},{"optional":true,"default":null,"t":"queueName","d":"A string containing the name of the queue. Defaults to <code>fx<\/code>, the standard effects queue.","type":"String"}]},"detach":{"r":{"d":"","type":"jQuery"},"s":"Remove the set of matched elements from the DOM.","y":"","p":[{"optional":true,"default":null,"t":"selector","d":"A selector expression that filters the set of matched elements to be removed.","type":"Selector"}]},"die":{"r":{"d":"","type":"jQuery"},"s":"Remove event handlers previously attached using <code>.live()<\/code> from the elements.","y":"To unbind all live events from all paragraphs, write:\n$( \"p\" ).die();\n","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"each":{"r":{"d":"","type":"Object"},"s":"A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.","y":"Iterates through the array displaying each number as both a word and numeral\nvar arr = [ \"one\", \"two\", \"three\", \"four\", \"five\" ];\nvar obj = { one: 1, two: 2, three: 3, four: 4, five: 5 };\n\njQuery.each( arr, function( i, val ) {\n  $( \"#\" + val ).text( \"Mine is \" + val + \".\" );\n\n  \/\/ Will stop running after \"three\"\n  return ( val !== \"three\" );\n});\n\njQuery.each( obj, function( i, val ) {\n  $( \"#\" + i ).append( document.createTextNode( \" - \" + val ) );\n});\n","p":[{"optional":false,"default":null,"t":"collection","d":"The object or array to iterate over.","type":"Object"},{"optional":false,"default":null,"t":"callback(indexInArray, valueOfElement)","d":"The function that will be executed on every object.","type":"Function"}]},"empty":{"r":{"d":"","type":"Callbacks"},"s":"Remove all of the callbacks from a list.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"end":{"r":{"d":"","type":"jQuery"},"s":"End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.","y":"Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.\njQuery.fn.showTags = function( n ) {\n  var tags = this.map(function() {\n    return this.tagName;\n  })\n  .get()\n  .join( \", \" );\n  $( \"b:eq( \" + n + \" )\" ).text( tags );\n  return this;\n};\n\n$( \"p\" )\n  .showTags( 0 )\n  .find( \"span\" )\n    .showTags( 1 )\n    .css( \"background\", \"yellow\" )\n  .end()\n  .showTags( 2 )\n  .css( \"font-style\", \"italic\" );\n","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"eq":{"r":{"d":"","type":"jQuery"},"s":"Reduce the set of matched elements to the one at the specified index.","y":"","p":[{"optional":false,"default":null,"t":"index","d":"An integer indicating the 0-based position of the element. ","type":"Integer"}]},"error":{"r":{"d":"","type":""},"s":"Takes a string and throws an exception containing it.","y":"","p":[{"optional":false,"default":null,"t":"message","d":"The message to send out.","type":"String"}]},"fadeIn":{"r":{"d":"","type":"jQuery"},"s":"Display the matched elements by fading them to opaque.","y":"Animates hidden divs to fade in one by one, completing each animation within 600 milliseconds.\n$( document.body ).click(function() {\n  $( \"div:hidden:first\" ).fadeIn( \"slow\" );\n});\n","p":[{"optional":true,"default":"400","t":"duration","d":"A string or number determining how long the animation will run.","type":"Number|String"},{"optional":true,"default":null,"t":"complete","d":"A function to call once the animation is complete.","type":"Function"}]},"fadeOut":{"r":{"d":"","type":"jQuery"},"s":"Hide the matched elements by fading them to transparent.","y":"Animates all paragraphs to fade out, completing the animation within 600 milliseconds.\n$( \"p\" ).click(function() {\n  $( \"p\" ).fadeOut( \"slow\" );\n});\n","p":[{"optional":true,"default":"400","t":"duration","d":"A string or number determining how long the animation will run.","type":"Number|String"},{"optional":true,"default":null,"t":"complete","d":"A function to call once the animation is complete.","type":"Function"}]},"fadeTo":{"r":{"d":"","type":"jQuery"},"s":"Adjust the opacity of the matched elements.","y":"Animates first paragraph to fade to an opacity of 0.33 (33%, about one third visible), completing the animation within 600 milliseconds.\n$( \"p:first\" ).click(function() {\n  $( this ).fadeTo( \"slow\", 0.33 );\n});\n","p":[{"optional":false,"default":null,"t":"duration","d":"A string or number determining how long the animation will run.","type":"String|Number"},{"optional":false,"default":null,"t":"opacity","d":"A number between 0 and 1 denoting the target opacity.","type":"Number"},{"optional":true,"default":null,"t":"complete","d":"A function to call once the animation is complete.","type":"Function"}]},"fadeToggle":{"r":{"d":"","type":"jQuery"},"s":"Display or hide the matched elements by animating their opacity.","y":"","p":[{"optional":true,"default":"400","t":"duration","d":"A string or number determining how long the animation will run.","type":"Number|String"},{"optional":true,"default":"swing","t":"easing","d":"A string indicating which easing function to use for the transition.","type":"String"},{"optional":true,"default":null,"t":"complete","d":"A function to call once the animation is complete.","type":"Function"}]},"filter":{"r":{"d":"","type":"jQuery"},"s":"Reduce the set of matched elements to those that match the selector or pass the function's test. ","y":"Change the color of all divs; then add a border to those with a \"middle\" class.\n$( \"div\" )\n  .css( \"background\", \"#c8ebcc\" )\n  .filter( \".middle\" )\n    .css( \"border-color\", \"red\" );\n","p":[{"optional":false,"default":null,"t":"selector","d":"A string containing a selector expression to match the current set of elements against.","type":"Selector"}]},"find":{"r":{"d":"","type":"jQuery"},"s":"Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.","y":"Starts with all paragraphs and searches for descendant span elements, same as <code>$( \"p span\" )<\/code>\n$( \"p\" ).find( \"span\" ).css( \"color\", \"red\" );\n","p":[{"optional":false,"default":null,"t":"selector","d":"A string containing a selector expression to match elements against.","type":"Selector"}]},"finish":{"r":{"d":"","type":"jQuery"},"s":"Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements.","y":"","p":[{"optional":true,"default":null,"t":"queue","d":"The name of the queue in which to stop animations.","type":"String"}]},"first":{"r":{"d":"","type":"jQuery"},"s":"Reduce the set of matched elements to the first in the set.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"focus":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to the \"focus\" JavaScript event, or trigger that event on an element.","y":"Fire focus.\n$( \"input\" ).focus(function() {\n  $( this ).next( \"span\" ).css( \"display\", \"inline\" ).fadeOut( 1000 );\n});\n","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute each time the event is triggered.","type":"Function"}]},"focusin":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to the \"focusin\" event.","y":"","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute each time the event is triggered.","type":"Function"}]},"focusout":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to the \"focusout\" JavaScript event.","y":"","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute each time the event is triggered.","type":"Function"}]},"get":{"r":{"d":"","type":"jqXHR"},"s":"Load data from the server using a HTTP GET request.","y":"Request the test.php page, but ignore the return results.\n$.get( \"test.php\" );\n","p":[{"optional":false,"default":null,"t":"url","d":"A string containing the URL to which the request is sent.","type":"String"},{"optional":true,"default":null,"t":"data","d":"A plain object or string that is sent to the server with the request.","type":"PlainObject|String"},{"optional":true,"default":null,"t":"success(data, textStatus, jqXHR)","d":"A callback function that is executed if the request succeeds.","type":"Function"},{"optional":true,"default":null,"t":"dataType","d":"The type of data expected from the server. Default: Intelligent Guess (xml, json, script, or html).","type":"String"}]},"has":{"r":{"d":"","type":"Boolean"},"s":"Determine whether a supplied callback is in a list","y":"","p":[{"optional":false,"default":null,"t":"callback","d":"The callback to search for.","type":"Function"}]},"hasClass":{"r":{"d":"","type":"Boolean"},"s":"Determine whether any of the matched elements are assigned the given class.","y":"","p":[{"optional":false,"default":null,"t":"className","d":"The class name to search for.","type":"String"}]},"height":{"r":{"d":"","type":"Number"},"s":"Get the current computed height for the first element in the set of matched elements or set the height of every matched element.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"hide":{"r":{"d":"","type":"jQuery"},"s":"Hide the matched elements.","y":"Hides all paragraphs then the link on click.\n$( \"p\" ).hide();\n$( \"a\" ).click(function( event ) {\n  event.preventDefault();\n  $( this ).hide();\n});\n","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"hover":{"r":{"d":"","type":"jQuery"},"s":"Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.","y":"To add a special style to list items that are being hovered over, try:\n$( \"li\" ).hover(\n  function() {\n    $( this ).append( $( \"<span> ***<\/span>\" ) );\n  }, function() {\n    $( this ).find( \"span:last\" ).remove();\n  }\n);\n\n$( \"li.fade\" ).hover(function() {\n  $( this ).fadeOut( 100 );\n  $( this ).fadeIn( 500 );\n});\n","p":[{"optional":false,"default":null,"t":"handlerIn(eventObject)","d":"A function to execute when the mouse pointer enters the element.","type":"Function"},{"optional":false,"default":null,"t":"handlerOut(eventObject)","d":"A function to execute when the mouse pointer leaves the element.","type":"Function"}]},"html":{"r":{"d":"","type":"String"},"s":"Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"index":{"r":{"d":"","type":"Number"},"s":"Search for a given element from among the matched elements.","y":"On click, returns the index (zero-based) of that div in the page.\n$( \"div\" ).click(function() {\n  \/\/ `this` is the DOM element that was clicked\n  var index = $( \"div\" ).index( this );\n  $( \"span\" ).text( \"That was div index #\" + index );\n});\n","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"innerHeight":{"r":{"d":"","type":"Number"},"s":"Get the current computed height for the first element in the set of matched elements, including padding but not border.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"innerWidth":{"r":{"d":"","type":"Number"},"s":"Get the current computed width for the first element in the set of matched elements, including padding but not border.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"insertAfter":{"r":{"d":"","type":"jQuery"},"s":"Insert every element in the set of matched elements after the target.","y":"","p":[{"optional":false,"default":null,"t":"target","d":"A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted after the element(s) specified by this parameter.","type":"Selector|htmlString|Element|Array|jQuery"}]},"insertBefore":{"r":{"d":"","type":"jQuery"},"s":"Insert every element in the set of matched elements before the target.","y":"","p":[{"optional":false,"default":null,"t":"target","d":"A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted before the element(s) specified by this parameter.","type":"Selector|htmlString|Element|Array|jQuery"}]},"is":{"r":{"d":"","type":"Boolean"},"s":"Check the current matched set of elements against a selector, element, or jQuery object and return <code>true<\/code> if at least one of these elements matches the given arguments.","y":"Shows a few ways is() can be used inside an event handler.\n$( \"div\" ).one( \"click\", function() {\n  if ( $( this ).is( \":first-child\" ) ) {\n    $( \"p\" ).text( \"It's the first div.\" );\n  } else if ( $( this ).is( \".blue,.red\" ) ) {\n    $( \"p\" ).text( \"It's a blue or red div.\" );\n  } else if ( $( this ).is( \":contains('Peter')\" ) ) {\n    $( \"p\" ).text( \"It's Peter!\" );\n  } else {\n    $( \"p\" ).html( \"It's nothing <em>special<\/em>.\" );\n  }\n  $( \"p\" ).hide().slideDown( \"slow\" );\n  $( this ).css({\n    \"border-style\": \"inset\",\n    cursor: \"default\"\n  });\n});\n","p":[{"optional":false,"default":null,"t":"selector","d":"A string containing a selector expression to match elements against.","type":"Selector"}]},"jQuery":{"r":{"d":"","type":"jQuery"},"s":"Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string.","y":"Find all p elements that are children of a div element and apply a border to them.\n$( \"div > p\" ).css( \"border\", \"1px solid gray\" );\n","p":[{"optional":false,"default":null,"t":"selector","d":"A string containing a selector expression","type":"Selector"},{"optional":true,"default":null,"t":"context","d":"A DOM Element, Document, or jQuery to use as context","type":"Element|jQuery"}]},"keydown":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to the \"keydown\" JavaScript event, or trigger that event on an element.","y":"","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute each time the event is triggered.","type":"Function"}]},"keypress":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to the \"keypress\" JavaScript event, or trigger that event on an element.","y":"","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute each time the event is triggered.","type":"Function"}]},"keyup":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to the \"keyup\" JavaScript event, or trigger that event on an element.","y":"","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute each time the event is triggered.","type":"Function"}]},"last":{"r":{"d":"","type":"jQuery"},"s":"Reduce the set of matched elements to the final one in the set.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"live":{"r":{"d":"","type":"jQuery"},"s":"Attach an event handler for all elements which match the current selector, now and in the future.","y":"Cancel a default action and prevent it from bubbling up by returning false.\n$( \"a\" ).live( \"click\", function() {\n  return false;\n});\n","p":[{"optional":false,"default":null,"t":"events","d":"A string containing a JavaScript event type, such as \"click\" or \"keydown.\" As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names.","type":"String"},{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute at the time the event is triggered.","type":"Function"}]},"load-event":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to the \"load\" JavaScript event.","y":"Run a function when the page is fully loaded including graphics.\n$( window ).load(function() {\n  \/\/ Run code\n});\n","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute when the event is triggered.","type":"Function"}]},"load":{"r":{"d":"","type":"jQuery"},"s":"Load data from the server and place the returned HTML into the matched element.","y":"Load the main page's footer navigation into an ordered list.\n$( \"#new-nav\" ).load( \"\/ #jq-footerNavigation li\" );\n","p":[{"optional":false,"default":null,"t":"url","d":"A string containing the URL to which the request is sent.","type":"String"},{"optional":true,"default":null,"t":"data","d":"A plain object or string that is sent to the server with the request.","type":"PlainObject|String"},{"optional":true,"default":null,"t":"complete(responseText, textStatus, XMLHttpRequest)","d":"A callback function that is executed when the request completes.","type":"Function"}]},"map":{"r":{"d":"","type":"Array"},"s":"Translate all items in an array or object to new array of items.","y":"Use $.map() to change the values of an array.\nvar arr = [ \"a\", \"b\", \"c\", \"d\", \"e\" ];\n$( \"div\" ).text( arr.join( \", \" ) );\n\narr = jQuery.map( arr, function( n, i ) {\n  return ( n.toUpperCase() + i );\n});\n$( \"p\" ).text( arr.join( \", \" ) );\n\narr = jQuery.map( arr, function( a ) {\n  return a + a;\n});\n$( \"span\" ).text( arr.join( \", \" ) );\n","p":[{"optional":false,"default":null,"t":"array","d":"The Array to translate.","type":"Array"},{"optional":false,"default":null,"t":"callback( elementOfArray, indexInArray )","d":"The function to process each item against.  The first argument to the function is the array item, the second argument is the index in array The function can return any value. Within the function, <code>this<\/code> refers to the global (window) object.","type":"Function"}]},"mousedown":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to the \"mousedown\" JavaScript event, or trigger that event on an element.","y":"","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute each time the event is triggered.","type":"Function"}]},"mouseenter":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.","y":"","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute each time the event is triggered.","type":"Function"}]},"mouseleave":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.","y":"","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute each time the event is triggered.","type":"Function"}]},"mousemove":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to the \"mousemove\" JavaScript event, or trigger that event on an element.","y":"","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute each time the event is triggered.","type":"Function"}]},"mouseout":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to the \"mouseout\" JavaScript event, or trigger that event on an element.","y":"","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute each time the event is triggered.","type":"Function"}]},"mouseover":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to the \"mouseover\" JavaScript event, or trigger that event on an element.","y":"","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute each time the event is triggered.","type":"Function"}]},"mouseup":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to the \"mouseup\" JavaScript event, or trigger that event on an element.","y":"","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute each time the event is triggered.","type":"Function"}]},"next":{"r":{"d":"","type":"jQuery"},"s":"Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.","y":"Find the very next sibling of each disabled button and change its text \"this button is disabled\".\n$( \"button[disabled]\" ).next().text( \"this button is disabled\" );\n","p":[{"optional":true,"default":null,"t":"selector","d":"A string containing a selector expression to match elements against.","type":"Selector"}]},"nextAll":{"r":{"d":"","type":"jQuery"},"s":"Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.","y":"Locate all the divs after the first and give them a class.\n$( \"div:first\" ).nextAll().addClass( \"after\" );\n","p":[{"optional":true,"default":null,"t":"selector","d":"A string containing a selector expression to match elements against.","type":"String"}]},"nextUntil":{"r":{"d":"","type":"jQuery"},"s":"Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.","y":"","p":[{"optional":true,"default":null,"t":"selector","d":"A string containing a selector expression to indicate where to stop matching following sibling elements.","type":"Selector"},{"optional":true,"default":null,"t":"filter","d":"A string containing a selector expression to match elements against.","type":"Selector"}]},"not":{"r":{"d":"","type":"jQuery"},"s":"Remove elements from the set of matched elements.","y":"Adds a border to divs that are not green or blue.\n$( \"div\" ).not( \".green, #blueone\" )\n  .css( \"border-color\", \"red\" );\n","p":[{"optional":false,"default":null,"t":"selector","d":"A string containing a selector expression to match elements against.","type":"Selector"}]},"off":{"r":{"d":"","type":"jQuery"},"s":"Remove an event handler.","y":"Add and remove event handlers on the colored button.\nfunction flash() {\n  $( \"div\" ).show().fadeOut( \"slow\" );\n}\n$( \"#bind\" ).click(function() {\n  $( \"body\" )\n    .on( \"click\", \"#theone\", flash )\n    .find( \"#theone\" )\n      .text( \"Can Click!\" );\n});\n$( \"#unbind\" ).click(function() {\n  $( \"body\" )\n    .off( \"click\", \"#theone\", flash )\n    .find( \"#theone\" )\n      .text( \"Does nothing...\" );\n});\n","p":[{"optional":false,"default":null,"t":"events","d":"One or more space-separated event types and optional namespaces, or just namespaces, such as \"click\", \"keydown.myPlugin\", or \".myPlugin\".","type":"String"},{"optional":true,"default":null,"t":"selector","d":"A selector which should match the one originally passed to <code>.on()<\/code> when attaching event handlers.","type":"String"},{"optional":true,"default":null,"t":"handler(eventObject)","d":"A handler function previously attached for the event(s), or the special value <code>false<\/code>.","type":"Function"}]},"offset":{"r":{"d":"","type":"Object"},"s":"Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document.","y":"Access the offset of the second paragraph:\nvar p = $( \"p:last\" );\nvar offset = p.offset();\np.html( \"left: \" + offset.left + \", top: \" + offset.top );\n","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"offsetParent":{"r":{"d":"","type":"jQuery"},"s":"Get the closest ancestor element that is positioned.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"on":{"r":{"d":"","type":"jQuery"},"s":"Attach an event handler function for one or more events to the selected elements.","y":"Display a paragraph's text in an alert when it is clicked:\n$( \"p\" ).on( \"click\", function() {\n  alert( $( this ).text() );\n});\n","p":[{"optional":false,"default":null,"t":"events","d":"One or more space-separated event types and optional namespaces, such as \"click\" or \"keydown.myPlugin\".","type":"String"},{"optional":true,"default":null,"t":"selector","d":"A selector string to filter the descendants of the selected elements that trigger the event. If the selector is <code>null<\/code> or omitted, the event is always triggered when it reaches the selected element.","type":"String"},{"optional":true,"default":null,"t":"data","d":"Data to be passed to the handler in <ahref=\"\/event.data\/\"><code>event.data<\/code><\/a> when an event is triggered.","type":"Anything"},{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute when the event is triggered. The value <code>false<\/code> is also allowed as a shorthand for a function that simply does <code>return false<\/code>.","type":"Function"}]},"one":{"r":{"d":"","type":"jQuery"},"s":"Attach a handler to an event for the elements. The handler is executed at most once per element per event type.","y":"Tie a one-time click to each div.\nvar n = 0;\n$( \"div\" ).one( \"click\", function() {\n  var index = $( \"div\" ).index( this );\n  $( this ).css({\n    borderStyle: \"inset\",\n    cursor: \"auto\"\n  });\n  $( \"p\" ).text( \"Div at index #\" + index + \" clicked.\" +\n    \" That's \" + (++n) + \" total clicks.\" );\n});\n","p":[{"optional":false,"default":null,"t":"events","d":"A string containing one or more JavaScript event types, such as \"click\" or \"submit,\" or custom event names.","type":"String"},{"optional":true,"default":null,"t":"data","d":"An object containing data that will be passed to the event handler.","type":"PlainObject"},{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute at the time the event is triggered.","type":"Function"}]},"outerHeight":{"r":{"d":"","type":"Number"},"s":"Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin. Returns a number (without \"px\") representation of the value or null if called on an empty set of elements.","y":"","p":[{"optional":true,"default":null,"t":"includeMargin","d":"A Boolean indicating whether to include the element's margin in the calculation.","type":"Boolean"}]},"outerWidth":{"r":{"d":"","type":"Number"},"s":"Get the current computed width for the first element in the set of matched elements, including padding and border.","y":"","p":[{"optional":true,"default":null,"t":"includeMargin","d":"A Boolean indicating whether to include the element's margin in the calculation.","type":"Boolean"}]},"parent":{"r":{"d":"","type":"jQuery"},"s":"Get the parent of each element in the current set of matched elements, optionally filtered by a selector.","y":"Shows the parent of each element as (parent > child).  Check the View Source to see the raw html.\n$( \"*\", document.body ).each(function() {\n  var parentTag = $( this ).parent().get( 0 ).tagName;\n  $( this ).prepend( document.createTextNode( parentTag + \" > \" ) );\n});\n","p":[{"optional":true,"default":null,"t":"selector","d":"A string containing a selector expression to match elements against.","type":"Selector"}]},"parents":{"r":{"d":"","type":"jQuery"},"s":"Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.","y":"Find all parent elements of each b.\nvar parentEls = $( \"b\" ).parents()\n  .map(function() {\n    return this.tagName;\n  })\n  .get()\n  .join( \", \" );\n$( \"b\" ).append( \"<strong>\" + parentEls + \"<\/strong>\" );\n","p":[{"optional":true,"default":null,"t":"selector","d":"A string containing a selector expression to match elements against.","type":"Selector"}]},"parentsUntil":{"r":{"d":"","type":"jQuery"},"s":"Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.","y":"","p":[{"optional":true,"default":null,"t":"selector","d":"A string containing a selector expression to indicate where to stop matching ancestor elements.","type":"Selector"},{"optional":true,"default":null,"t":"filter","d":"A string containing a selector expression to match elements against.","type":"Selector"}]},"position":{"r":{"d":"","type":"Object"},"s":"Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"prepend":{"r":{"d":"","type":"jQuery"},"s":"Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.","y":"Prepends some HTML to all paragraphs.\n$( \"p\" ).prepend( \"<b>Hello <\/b>\" );\n","p":[{"optional":false,"default":null,"t":"content","d":"DOM element, array of elements, HTML string, or jQuery object to insert at the beginning of each element in the set of matched elements.","type":"htmlString|Element|Array|jQuery"},{"optional":true,"default":null,"t":"content","d":"One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert at the beginning of each element in the set of matched elements.","type":"htmlString|Element|Array|jQuery"}]},"prependTo":{"r":{"d":"","type":"jQuery"},"s":"Insert every element in the set of matched elements to the beginning of the target.","y":"","p":[{"optional":false,"default":null,"t":"target","d":"A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the beginning of the element(s) specified by this parameter.","type":"Selector|htmlString|Element|Array|jQuery"}]},"prev":{"r":{"d":"","type":"jQuery"},"s":"Get the immediately preceding sibling of each element in the set of matched elements, optionally filtered by a selector.","y":"Find the very previous sibling of each div.\nvar $curr = $( \"#start\" );\n$curr.css( \"background\", \"#f99\" );\n$( \"button\" ).click(function() {\n  $curr = $curr.prev();\n  $( \"div\" ).css( \"background\", \"\" );\n  $curr.css( \"background\", \"#f99\" );\n});\n","p":[{"optional":true,"default":null,"t":"selector","d":"A string containing a selector expression to match elements against.","type":"Selector"}]},"prevAll":{"r":{"d":"","type":"jQuery"},"s":"Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.","y":"","p":[{"optional":true,"default":null,"t":"selector","d":"A string containing a selector expression to match elements against.","type":"Selector"}]},"prevUntil":{"r":{"d":"","type":"jQuery"},"s":"Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.","y":"","p":[{"optional":true,"default":null,"t":"selector","d":"A string containing a selector expression to indicate where to stop matching preceding sibling elements.","type":"Selector"},{"optional":true,"default":null,"t":"filter","d":"A string containing a selector expression to match elements against.","type":"Selector"}]},"promise":{"r":{"d":"","type":"Promise"},"s":" Return a Deferred's Promise object. ","y":"Create a Deferred and set two timer-based functions to either resolve or reject the Deferred after a random interval. Whichever one fires first \"wins\" and will call one of the callbacks. The second timeout has no effect since the Deferred is already complete (in a resolved or rejected state) from the first timeout action. Also set a timer-based progress notification function, and call a progress handler that adds \"working...\" to the document body.\nfunction asyncEvent() {\n  var dfd = new jQuery.Deferred();\n\n  \/\/ Resolve after a random interval\n  setTimeout(function() {\n    dfd.resolve( \"hurray\" );\n  }, Math.floor( 400 + Math.random() * 2000 ) );\n\n  \/\/ Reject after a random interval\n  setTimeout(function() {\n    dfd.reject( \"sorry\" );\n  }, Math.floor( 400 + Math.random() * 2000 ) );\n\n  \/\/ Show a \"working...\" message every half-second\n  setTimeout(function working() {\n    if ( dfd.state() === \"pending\" ) {\n      dfd.notify( \"working... \" );\n      setTimeout( working, 500 );\n    }\n  }, 1 );\n\n  \/\/ Return the Promise so caller can't change the Deferred\n  return dfd.promise();\n}\n\n\/\/ Attach a done, fail, and progress handler for the asyncEvent\n$.when( asyncEvent() ).then(\n  function( status ) {\n    alert( status + \", things are going well\" );\n  },\n  function( status ) {\n    alert( status + \", you fail this time\" );\n  },\n  function( status ) {\n    $( \"body\" ).append( status );\n  }\n);\n","p":[{"optional":true,"default":null,"t":"target","d":"Object onto which the promise methods have to be attached","type":"Object"}]},"prop":{"r":{"d":"","type":[{"type":"String"},{"type":"Boolean"}]},"s":"Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element.","y":"","p":[{"optional":false,"default":null,"t":"propertyName","d":"The name of the property to get.","type":"String"}]},"pushStack":{"r":{"d":"","type":"jQuery"},"s":"Add a collection of DOM elements onto the jQuery stack.","y":"","p":[{"optional":false,"default":null,"t":"elements","d":"An array of elements to push onto the stack and make into a new jQuery object.","type":"Array"}]},"queue":{"r":{"d":"","type":"Array"},"s":"Show or manipulate the queue of functions to be executed on the matched element.","y":"","p":[{"optional":false,"default":null,"t":"element","d":"A DOM element to inspect for an attached queue.","type":"Element"},{"optional":true,"default":null,"t":"queueName","d":"A string containing the name of the queue. Defaults to <code>fx<\/code>, the standard effects queue.","type":"String"}]},"ready":{"r":{"d":"","type":"jQuery"},"s":"Specify a function to execute when the DOM is fully loaded.","y":"","p":[{"optional":false,"default":null,"t":"handler","d":"A function to execute after the DOM is ready.","type":"Function"}]},"remove":{"r":{"d":"","type":"Callbacks"},"s":"Remove a callback or a collection of callbacks from a callback list.","y":"","p":[{"optional":false,"default":null,"t":"callbacks","d":"A function, or array of functions, that are to be removed from the callback list.","type":"Function|Array"}]},"removeAttr":{"r":{"d":"","type":"jQuery"},"s":"Remove an attribute from each element in the set of matched elements.","y":"","p":[{"optional":false,"default":null,"t":"attributeName","d":"An attribute to remove; as of version 1.7, it can be a space-separated list of attributes.","type":"String"}]},"removeClass":{"r":{"d":"","type":"jQuery"},"s":"Remove a single class, multiple classes, or all classes from each element in the set of matched elements.","y":"Remove the class 'blue' from the matched elements.\n$( \"p:even\" ).removeClass( \"blue\" );\n","p":[{"optional":true,"default":null,"t":"className","d":"One or more space-separated classes to be removed from the class attribute of each matched element.","type":"String"}]},"removeData":{"r":{"d":"","type":"jQuery"},"s":"Remove a previously-stored piece of data.","y":"","p":[{"optional":false,"default":null,"t":"element","d":"A DOM element from which to remove data.","type":"Element"},{"optional":true,"default":null,"t":"name","d":"A string naming the piece of data to remove.","type":"String"}]},"removeProp":{"r":{"d":"","type":"jQuery"},"s":"Remove a property for the set of matched elements.","y":"","p":[{"optional":false,"default":null,"t":"propertyName","d":"The name of the property to remove.","type":"String"}]},"replaceAll":{"r":{"d":"","type":"jQuery"},"s":"Replace each target element with the set of matched elements.","y":"","p":[{"optional":false,"default":null,"t":"target","d":"A selector string, jQuery object, DOM element, or array of elements indicating which element(s) to replace.","type":"Selector|jQuery|Array|Element"}]},"replaceWith":{"r":{"d":"","type":"jQuery"},"s":"Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed.","y":"On click, replace the button with a div containing the same word.\n$( \"button\" ).click(function() {\n  $( this ).replaceWith( \"<div>\" + $( this ).text() + \"<\/div>\" );\n});\n","p":[{"optional":false,"default":null,"t":"newContent","d":"The content to insert. May be an HTML string, DOM element, array of DOM elements, or jQuery object.","type":"htmlString|Element|Array|jQuery"}]},"resize":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to the \"resize\" JavaScript event, or trigger that event on an element.","y":"","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute each time the event is triggered.","type":"Function"}]},"scroll":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to the \"scroll\" JavaScript event, or trigger that event on an element.","y":"","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute each time the event is triggered.","type":"Function"}]},"scrollLeft":{"r":{"d":"","type":"Integer"},"s":"Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"scrollTop":{"r":{"d":"","type":"Integer"},"s":"Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"select":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to the \"select\" JavaScript event, or trigger that event on an element.","y":"To do something when text in input boxes is selected:\n$( \":input\" ).select(function() {\n  $( \"div\" ).text( \"Something was selected\" ).show().fadeOut( 1000 );\n});\n","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute each time the event is triggered.","type":"Function"}]},"serialize":{"r":{"d":"","type":"String"},"s":"Encode a set of form elements as a string for submission.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"serializeArray":{"r":{"d":"","type":"Array"},"s":"Encode a set of form elements as an array of names and values.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"show":{"r":{"d":"","type":"jQuery"},"s":"Display the matched elements.","y":"Animates all hidden paragraphs to show slowly, completing the animation within 600 milliseconds.\n$( \"button\" ).click(function() {\n  $( \"p\" ).show( \"slow\" );\n});\n","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"siblings":{"r":{"d":"","type":"jQuery"},"s":"Get the siblings of each element in the set of matched elements, optionally filtered by a selector.","y":"Find the unique siblings of all yellow li elements in the 3 lists (including other yellow li elements if appropriate).\nvar len = $( \".hilite\" ).siblings()\n  .css( \"color\", \"red\" )\n  .length;\n$( \"b\" ).text( len );\n","p":[{"optional":true,"default":null,"t":"selector","d":"A string containing a selector expression to match elements against.","type":"Selector"}]},"size":{"r":{"d":"","type":"Integer"},"s":"Return the number of elements in the jQuery object.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"slice":{"r":{"d":"","type":"jQuery"},"s":"Reduce the set of matched elements to a subset specified by a range of indices.","y":"Turns divs yellow based on a random slice.\nfunction colorEm() {\n  var $div = $( \"div\" );\n  var start = Math.floor( Math.random() * $div.length );\n  var end = Math.floor( Math.random() * ( $div.length - start ) ) +\n    start + 1;\n  if ( end === $div.length ) {\n    end = undefined;\n  }\n  $div.css( \"background\", \"\" );\n  if ( end ) {\n    $div.slice( start, end ).css( \"background\", \"yellow\" );\n  } else {\n    $div.slice( start ).css( \"background\", \"yellow\" );\n  }\n  $( \"span\" ).text( \"$( 'div' ).slice( \" + start +\n    (end ? \", \" + end : \"\") +\n    \").css( 'background', 'yellow' );\" );\n}\n\n$( \"button\" ).click( colorEm );\n","p":[{"optional":false,"default":null,"t":"start","d":"An integer indicating the 0-based position at which the elements begin to be selected. If negative, it indicates an offset from the end of the set.","type":"Integer"},{"optional":true,"default":null,"t":"end","d":"An integer indicating the 0-based position at which the elements stop being selected. If negative, it indicates an offset from the end of the set. If omitted, the range continues until the end of the set.","type":"Integer"}]},"slideDown":{"r":{"d":"","type":"jQuery"},"s":"Display the matched elements with a sliding motion.","y":"Animates all divs to slide down and show themselves over 600 milliseconds.\n$( document.body ).click(function () {\n  if ( $( \"div:first\" ).is( \":hidden\" ) ) {\n    $( \"div\" ).slideDown( \"slow\" );\n  } else {\n    $( \"div\" ).hide();\n  }\n});\n","p":[{"optional":true,"default":"400","t":"duration","d":"A string or number determining how long the animation will run.","type":"Number|String"},{"optional":true,"default":null,"t":"complete","d":"A function to call once the animation is complete.","type":"Function"}]},"slideToggle":{"r":{"d":"","type":"jQuery"},"s":"Display or hide the matched elements with a sliding motion.","y":"Animates all paragraphs to slide up or down, completing the animation within 600 milliseconds.\n$( \"button\" ).click(function() {\n  $( \"p\" ).slideToggle( \"slow\" );\n});\n","p":[{"optional":true,"default":"400","t":"duration","d":"A string or number determining how long the animation will run.","type":"Number|String"},{"optional":true,"default":null,"t":"complete","d":"A function to call once the animation is complete.","type":"Function"}]},"slideUp":{"r":{"d":"","type":"jQuery"},"s":"Hide the matched elements with a sliding motion.","y":"Animates all divs to slide up, completing the animation within 400 milliseconds.\n$( document.body ).click(function() {\n  if ( $( \"div:first\" ).is( \":hidden\" ) ) {\n    $( \"div\" ).show( \"slow\" );\n  } else {\n    $( \"div\" ).slideUp();\n  }\n});\n","p":[{"optional":true,"default":"400","t":"duration","d":"A string or number determining how long the animation will run.","type":"Number|String"},{"optional":true,"default":null,"t":"complete","d":"A function to call once the animation is complete.","type":"Function"}]},"stop":{"r":{"d":"","type":"jQuery"},"s":"Stop the currently-running animation on the matched elements.","y":"Click the Go button once to start the animation, then click the STOP button to stop it where it's currently positioned.  Another option is to click several buttons to queue them up and see that stop just kills the currently playing one.\n\/\/ Start animation\n$( \"#go\" ).click(function() {\n  $( \".block\" ).animate({ left: \"+=100px\" }, 2000 );\n});\n\n\/\/ Stop animation when button is clicked\n$( \"#stop\" ).click(function() {\n  $( \".block\" ).stop();\n});\n\n\/\/ Start animation in the opposite direction\n$( \"#back\" ).click(function() {\n  $( \".block\" ).animate({ left: \"-=100px\" }, 2000 );\n});\n","p":[{"optional":true,"default":null,"t":"clearQueue","d":"A Boolean indicating whether to remove queued animation as well. Defaults to <code>false<\/code>.","type":"Boolean"},{"optional":true,"default":null,"t":"jumpToEnd","d":"A Boolean indicating whether to complete the current animation immediately. Defaults to <code>false<\/code>.","type":"Boolean"}]},"submit":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to the \"submit\" JavaScript event, or trigger that event on an element.","y":"If you'd like to prevent forms from being submitted unless a flag variable is set, try:\n$( \"form\" ).submit(function( event ) {\n  if ( $( \"input:first\" ).val() === \"correct\" ) {\n    $( \"span\" ).text( \"Validated...\" ).show();\n    return;\n  }\n\n  $( \"span\" ).text( \"Not valid!\" ).show().fadeOut( 1000 );\n  event.preventDefault();\n});\n","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute each time the event is triggered.","type":"Function"}]},"text":{"r":{"d":"","type":"String"},"s":"Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"toArray":{"r":{"d":"","type":"Array"},"s":"Retrieve all the elements contained in the jQuery set, as an array.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"toggle-event":{"r":{"d":"","type":"jQuery"},"s":"Bind two or more handlers to the matched elements, to be executed on alternate clicks.","y":"","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute every even time the element is clicked.","type":"Function"},{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute every odd time the element is clicked.","type":"Function"},{"optional":true,"default":null,"t":"handler(eventObject)","d":"Additional handlers to cycle through after clicks.","type":"Function"}]},"toggle":{"r":{"d":"","type":"jQuery"},"s":"Display or hide the matched elements.","y":"Toggles all paragraphs.\n$( \"button\" ).click(function() {\n  $( \"p\" ).toggle();\n});\n","p":[{"optional":true,"default":"400","t":"duration","d":"A string or number determining how long the animation will run.","type":"Number|String"},{"optional":true,"default":null,"t":"complete","d":"A function to call once the animation is complete.","type":"Function"}]},"toggleClass":{"r":{"d":"","type":"jQuery"},"s":"Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.","y":"Toggle the class 'highlight' when a paragraph is clicked.\n$( \"p\" ).click(function() {\n  $( this ).toggleClass( \"highlight\" );\n});\n","p":[{"optional":false,"default":null,"t":"className","d":"One or more class names (separated by spaces) to be toggled for each element in the matched set.","type":"String"}]},"trigger":{"r":{"d":"","type":"jQuery"},"s":"Execute all handlers and behaviors attached to the matched elements for the given event type.","y":"Clicks to button #2 also trigger a click for button #1.\n$( \"button:first\" ).click(function() {\n  update( $( \"span:first\" ) );\n});\n\n$( \"button:last\" ).click(function() {\n  $( \"button:first\" ).trigger( \"click\" );\n  update( $( \"span:last\" ) );\n});\n\nfunction update( j ) {\n  var n = parseInt( j.text(), 10 );\n  j.text( n + 1 );\n}\n","p":[{"optional":false,"default":null,"t":"eventType","d":"A string containing a JavaScript event type, such as <code>click<\/code> or <code>submit<\/code>.","type":"String"},{"optional":true,"default":null,"t":"extraParameters","d":"Additional parameters to pass along to the event handler.","type":"Array|PlainObject"}]},"triggerHandler":{"r":{"d":"","type":"Object"},"s":"Execute all handlers attached to an element for an event.","y":"","p":[{"optional":false,"default":null,"t":"eventType","d":"A string containing a JavaScript event type, such as <code>click<\/code> or <code>submit<\/code>.","type":"String"},{"optional":true,"default":null,"t":"extraParameters","d":"An array of additional parameters to pass along to the event handler.","type":"Array"}]},"unbind":{"r":{"d":"","type":"jQuery"},"s":"Remove a previously-attached event handler from the elements.","y":"Can bind and unbind events to the colored button.\nfunction aClick() {\n  $( \"div\" ).show().fadeOut( \"slow\" );\n}\n$( \"#bind\" ).click(function() {\n  $( \"#theone\" )\n    .bind( \"click\", aClick )\n    .text( \"Can Click!\" );\n});\n$( \"#unbind\" ).click(function() {\n  $( \"#theone\" )\n    .unbind( \"click\", aClick )\n    .text( \"Does nothing...\" );\n});\n","p":[{"optional":false,"default":null,"t":"eventType","d":"A string containing a JavaScript event type, such as <code>click<\/code> or <code>submit<\/code>.","type":"String"},{"optional":true,"default":null,"t":"handler(eventObject)","d":"The function that is to be no longer executed.","type":"Function"}]},"undelegate":{"r":{"d":"","type":"jQuery"},"s":"Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.","y":"Can bind and unbind events to the colored button.\nfunction aClick() {\n  $( \"div\" ).show().fadeOut( \"slow\" );\n}\n$( \"#bind\" ).click(function() {\n  $( \"body\" )\n    .delegate( \"#theone\", \"click\", aClick )\n    .find( \"#theone\" ).text( \"Can Click!\" );\n});\n$( \"#unbind\" ).click(function() {\n  $( \"body\" )\n    .undelegate( \"#theone\", \"click\", aClick )\n    .find( \"#theone\" ).text( \"Does nothing...\" );\n});\n","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"unload":{"r":{"d":"","type":"jQuery"},"s":"Bind an event handler to the \"unload\" JavaScript event.","y":"","p":[{"optional":false,"default":null,"t":"handler(eventObject)","d":"A function to execute when the event is triggered.","type":"Function"}]},"unwrap":{"r":{"d":"","type":"jQuery"},"s":"Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"val":{"r":{"d":"","type":[{"type":"String"},{"type":"Number"},{"type":"Array"}]},"s":"Get the current value of the first element in the set of matched elements or set the value of every matched element.","y":"Get the single value from a single select and an array of values from a multiple select and display their values.\nfunction displayVals() {\n  var singleValues = $( \"#single\" ).val();\n  var multipleValues = $( \"#multiple\" ).val() || [];\n  $( \"p\" ).html( \"<b>Single:<\/b> \" + singleValues +\n    \" <b>Multiple:<\/b> \" + multipleValues.join( \", \" ) );\n}\n\n$( \"select\" ).change( displayVals );\ndisplayVals();\n","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"width":{"r":{"d":"","type":"Number"},"s":"Get the current computed width for the first element in the set of matched elements or set the width of every matched element.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"wrap":{"r":{"d":"","type":"jQuery"},"s":"Wrap an HTML structure around each element in the set of matched elements.","y":"Wrap a new div around all of the paragraphs.\n$( \"p\" ).wrap( \"<div><\/div>\" );\n","p":[{"optional":false,"default":null,"t":"wrappingElement","d":"A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements.","type":"Selector|htmlString|Element|jQuery"}]},"wrapAll":{"r":{"d":"","type":"jQuery"},"s":"Wrap an HTML structure around all elements in the set of matched elements.","y":"Wrap a new div around all of the paragraphs.\n$( \"p\" ).wrapAll( \"<div><\/div>\" );\n","p":[{"optional":false,"default":null,"t":"wrappingElement","d":"A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements.","type":"Selector|htmlString|Element|jQuery"}]},"wrapInner":{"r":{"d":"","type":"jQuery"},"s":"Wrap an HTML structure around the content of each element in the set of matched elements.","y":"Selects all paragraphs and wraps a bold tag around each of its contents.\n$( \"p\" ).wrapInner( \"<b><\/b>\" );\n","p":[{"optional":false,"default":null,"t":"wrappingElement","d":"An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the content of the matched elements.","type":"String"}]},"disable":{"r":{"d":"","type":"Callbacks"},"s":"Disable a callback list from doing anything more.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"disabled":{"r":{"d":"","type":"Boolean"},"s":"Determine if the callbacks list has been disabled.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"fire":{"r":{"d":"","type":"Callbacks"},"s":"Call all of the callbacks with the given arguments","y":"","p":[{"optional":false,"default":null,"t":"arguments","d":"The argument or list of arguments to pass back to the callback list.","type":"Anything"}]},"fired":{"r":{"d":"","type":"Boolean"},"s":"Determine if the callbacks have already been called at least once.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"fireWith":{"r":{"d":"","type":"Callbacks"},"s":"Call all callbacks in a list with the given context and arguments.","y":"","p":[{"optional":true,"default":null,"t":"context","d":"A reference to the context in which the callbacks in the list should be fired.","type":""},{"optional":true,"default":null,"t":"args","d":"An argument, or array of arguments, to pass to the callbacks in the list.","type":""}]},"lock":{"r":{"d":"","type":"Callbacks"},"s":"Lock a callback list in its current state.","y":"Use <code>callbacks.lock()<\/code> to lock a callback list to avoid further changes being made to the list state:\n\/\/ A sample logging function to be added to a callbacks list\nvar foo = function( value ) {\n  console.log( \"foo:\" + value );\n};\n\nvar callbacks = $.Callbacks();\n\n\/\/ Add the logging function to the callback list\ncallbacks.add( foo );\n\n\/\/ Fire the items on the list, passing an argument\ncallbacks.fire( \"hello\" );\n\/\/ Outputs \"foo: hello\"\n\n\/\/ Lock the callbacks list\ncallbacks.lock();\n\n\/\/ Try firing the items again\ncallbacks.fire( \"world\" );\n\n\/\/ As the list was locked, no items were called,\n\/\/ so \"world\" isn't logged\n","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"locked":{"r":{"d":"","type":"Boolean"},"s":"Determine if the callbacks list has been locked.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"always":{"r":{"d":"","type":"Deferred"},"s":" Add handlers to be called when the Deferred object is either resolved or rejected. ","y":"","p":[{"optional":false,"default":null,"t":"alwaysCallbacks","d":"\n        A function, or array of functions, that is called when the Deferred is resolved or rejected.\n      ","type":"Function"},{"optional":true,"default":null,"t":"alwaysCallbacks","d":"\n        Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.\n      ","type":"Function"}]},"done":{"r":{"d":"","type":"Deferred"},"s":" Add handlers to be called when the Deferred object is resolved. ","y":"Since the <ahref=\"\/jQuery.get\/\"><code>jQuery.get<\/code><\/a> method returns a jqXHR object, which is derived from a Deferred object, we can attach a success callback using the <code>.done()<\/code> method.\n$.get( \"test.php\" ).done(function() {\n  alert( \"$.get succeeded\" );\n});\n","p":[{"optional":false,"default":null,"t":"doneCallbacks","d":"\n        A function, or array of functions, that are called when the Deferred is resolved.\n      ","type":"Function"},{"optional":true,"default":null,"t":"doneCallbacks","d":"\n        Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.\n      ","type":"Function"}]},"fail":{"r":{"d":"","type":"Deferred"},"s":" Add handlers to be called when the Deferred object is rejected. ","y":"","p":[{"optional":false,"default":null,"t":"failCallbacks","d":"\n        A function, or array of functions, that are called when the Deferred is rejected.\n      ","type":"Function"},{"optional":true,"default":null,"t":"failCallbacks","d":"\n        Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.\n      ","type":"Function"}]},"isRejected":{"r":{"d":"","type":"Boolean"},"s":" Determine whether a Deferred object has been rejected. ","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"isResolved":{"r":{"d":"","type":"Boolean"},"s":" Determine whether a Deferred object has been resolved. ","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"notify":{"r":{"d":"","type":"Deferred"},"s":" Call the progressCallbacks on a Deferred object with the given <code>args<\/code>. ","y":"","p":[{"optional":false,"default":null,"t":"args","d":"\n        Optional arguments that are passed to the progressCallbacks.\n      ","type":"Object"}]},"notifyWith":{"r":{"d":"","type":"Deferred"},"s":" Call the progressCallbacks on a Deferred object with the given context and <code>args<\/code>. ","y":"","p":[{"optional":false,"default":null,"t":"context","d":"\n        Context passed to the progressCallbacks as the <code>this<\/code> object.\n      ","type":"Object"},{"optional":true,"default":null,"t":"args","d":"\n        Optional arguments that are passed to the progressCallbacks.\n      ","type":"Object"}]},"pipe":{"r":{"d":"","type":"Promise"},"s":" Utility method to filter and\/or chain Deferreds.  ","y":"Filter resolve value:\nvar defer = $.Deferred(),\n  filtered = defer.pipe(function( value ) {\n    return value * 2;\n  });\n\ndefer.resolve( 5 );\nfiltered.done(function( value ) {\n  alert( \"Value is ( 2*5 = ) 10: \" + value );\n});\n","p":[{"optional":true,"default":null,"t":"doneFilter","d":"\n        An optional function that is called when the Deferred is resolved.\n      ","type":"Function"},{"optional":true,"default":null,"t":"failFilter","d":"\n        An optional function that is called when the Deferred is rejected.\n      ","type":"Function"}]},"progress":{"r":{"d":"","type":"Deferred"},"s":" Add handlers to be called when the Deferred object generates progress notifications.","y":"","p":[{"optional":false,"default":null,"t":"progressCallbacks","d":"\n        A function, or array of functions, to be called when the Deferred generates progress notifications.\n      ","type":"Function|Array"}]},"reject":{"r":{"d":"","type":"Deferred"},"s":" Reject a Deferred object and call any failCallbacks with the given <code>args<\/code>. ","y":"","p":[{"optional":true,"default":null,"t":"args","d":"\n        Optional arguments that are passed to the failCallbacks.\n      ","type":"Anything"}]},"rejectWith":{"r":{"d":"","type":"Deferred"},"s":" Reject a Deferred object and call any failCallbacks with the given <code>context<\/code> and <code>args<\/code>. ","y":"","p":[{"optional":false,"default":null,"t":"context","d":"\n        Context passed to the failCallbacks as the <code>this<\/code> object.\n      ","type":"Object"},{"optional":true,"default":null,"t":"args","d":"\n        An optional array of arguments that are passed to the failCallbacks.\n      ","type":"Array"}]},"resolve":{"r":{"d":"","type":"Deferred"},"s":" Resolve a Deferred object and call any doneCallbacks with the given <code>args<\/code>. ","y":"","p":[{"optional":true,"default":null,"t":"args","d":"\n        Optional arguments that are passed to the doneCallbacks.\n      ","type":"Anything"}]},"resolveWith":{"r":{"d":"","type":"Deferred"},"s":" Resolve a Deferred object and call any doneCallbacks with the given <code>context<\/code> and <code>args<\/code>. ","y":"","p":[{"optional":false,"default":null,"t":"context","d":"\n        Context passed to the doneCallbacks as the <code>this<\/code> object.\n      ","type":"Object"},{"optional":true,"default":null,"t":"args","d":"\n        An optional array of arguments that are passed to the doneCallbacks.\n      ","type":"Array"}]},"state":{"r":{"d":"","type":"String"},"s":"Determine the current state of a Deferred object. ","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"then":{"r":{"d":"","type":"Promise"},"s":"Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. ","y":"Since the <ahref=\"\/jQuery.get\/\"><code>jQuery.get<\/code><\/a> method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the <code>.then<\/code> method.\n$.get( \"test.php\" ).then(\n  function() {\n    alert( \"$.get succeeded\" );\n  }, function() {\n    alert( \"$.get failed!\" );\n  }\n);\n","p":[{"optional":false,"default":null,"t":"doneFilter","d":"\n        A function that is called when the Deferred is resolved.\n      ","type":"Function"},{"optional":true,"default":null,"t":"failFilter","d":"\n        An optional function that is called when the Deferred is rejected.\n      ","type":"Function"},{"optional":true,"default":null,"t":"progressFilter","d":"\n        An optional function that is called when progress notifications are sent to the Deferred.\n      ","type":"Function"}]},"isDefaultPrevented":{"r":{"d":"","type":"Boolean"},"s":"Returns whether <ahref=\"\/event.preventDefault\/\">event.preventDefault()<\/a> was ever called on this event object. ","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"isImmediatePropagationStopped":{"r":{"d":"","type":"Boolean"},"s":"  Returns whether event.stopImmediatePropagation() was ever called on this event object. ","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"isPropagationStopped":{"r":{"d":"","type":"Boolean"},"s":"  Returns whether <ahref=\"\/event.stopPropagation\/\">event.stopPropagation()<\/a> was ever called on this event object. ","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"preventDefault":{"r":{"d":"","type":"undefined"},"s":"If this method is called, the default action of the event will not be triggered.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"stopImmediatePropagation":{"r":{"d":"","type":""},"s":"Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"stopPropagation":{"r":{"d":"","type":""},"s":"Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"ajax":{"r":{"d":"","type":"jqXHR"},"s":"Perform an asynchronous HTTP (Ajax) request.","y":"Save some data to the server and notify the user once it's complete.\n$.ajax({\n  type: \"POST\",\n  url: \"some.php\",\n  data: { name: \"John\", location: \"Boston\" }\n})\n  .done(function( msg ) {\n    alert( \"Data Saved: \" + msg );\n  });\n","p":[{"optional":false,"default":null,"t":"url","d":"A string containing the URL to which the request is sent.","type":"String"},{"optional":true,"default":null,"t":"settings","d":"A set of key\/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with <ahref=\"\/jQuery.ajaxSetup\/\">$.ajaxSetup()<\/a>. See <ahref=\"#jQuery-ajax-settings\">jQuery.ajax( settings )<\/a> below for a complete list of all settings. ","type":"PlainObject"}]},"ajaxPrefilter":{"r":{"d":"","type":"undefined"},"s":"Handle custom Ajax options or modify existing options before each request is sent and before they are processed by <code>$.ajax()<\/code>.","y":"","p":[{"optional":true,"default":null,"t":"dataTypes","d":"An optional string containing one or more space-separated dataTypes","type":"String"},{"optional":false,"default":null,"t":"handler(options, originalOptions, jqXHR)","d":"A handler to set default values for future Ajax requests.","type":"Function"}]},"ajaxSetup":{"r":{"d":"","type":""},"s":"Set default values for future Ajax requests. Its use is not recommended.","y":"","p":[{"optional":false,"default":null,"t":"options","d":"A set of key\/value pairs that configure the default Ajax request. All options are optional. ","type":"PlainObject"}]},"ajaxTransport":{"r":{"d":"","type":"undefined"},"s":"Creates an object that handles the actual transmission of Ajax data.","y":"","p":[{"optional":false,"default":null,"t":"dataType","d":"A string identifying the data type to use","type":"String"},{"optional":false,"default":null,"t":"handler(options, originalOptions, jqXHR)","d":"A handler to return the new transport object to use with the data type provided in the first argument.","type":"Function"}]},"Callbacks":{"r":{"d":"","type":"Callbacks"},"s":"A multi-purpose callbacks list object that provides a powerful way to manage callback lists.","y":"","p":[{"optional":false,"default":null,"t":"flags","d":"An optional list of space-separated flags that change how the callback list behaves.","type":"String"}]},"contains":{"r":{"d":"","type":"Boolean"},"s":"Check to see if a DOM element is a descendant of another DOM element.","y":"","p":[{"optional":false,"default":null,"t":"container","d":"The DOM element that may contain the other element.","type":"Element"},{"optional":false,"default":null,"t":"contained","d":"The DOM element that may be contained by (a descendant of) the other element.","type":"Element"}]},"Deferred":{"r":{"d":"","type":"Deferred"},"s":" A constructor function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.","y":"","p":[{"optional":true,"default":null,"t":"beforeStart","d":"\n        A function that is called just before the constructor returns.\n      ","type":"Function"}]},"extend":{"r":{"d":"","type":"Object"},"s":"Merge the contents of two or more objects together into the first object.","y":"Merge two objects, modifying the first.\nvar object1 = {\n  apple: 0,\n  banana: { weight: 52, price: 100 },\n  cherry: 97\n};\nvar object2 = {\n  banana: { price: 200 },\n  durian: 100\n};\n\n\/\/ Merge object2 into object1\n$.extend( object1, object2 );\n\nvar printObj = typeof JSON !== \"undefined\" ? JSON.stringify : function( obj ) {\n  var arr = [];\n  $.each( obj, function( key, val ) {\n    var next = key + \": \";\n    next += $.isPlainObject( val ) ? printObj( val ) : val;\n    arr.push( next );\n  });\n  return \"{ \" +  arr.join( \", \" ) + \" }\";\n};\n\n$( \"#log\" ).append( printObj( object1 ) );\n","p":[{"optional":false,"default":null,"t":"target","d":" An object that will receive the new properties if additional objects are passed in or that will extend the jQuery namespace if it is the sole argument.","type":"Object"},{"optional":true,"default":null,"t":"object1","d":"An object containing additional properties to merge in.","type":"Object"},{"optional":true,"default":null,"t":"objectN","d":"Additional objects containing properties to merge in.","type":"Object"}]},"getJSON":{"r":{"d":"","type":"jqXHR"},"s":"Load JSON-encoded data from the server using a GET HTTP request.","y":"Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API.\n(function() {\n  var flickerAPI = \"http:\/\/api.flickr.com\/services\/feeds\/photos_public.gne?jsoncallback=?\";\n  $.getJSON( flickerAPI, {\n    tags: \"mount rainier\",\n    tagmode: \"any\",\n    format: \"json\"\n  })\n    .done(function( data ) {\n      $.each( data.items, function( i, item ) {\n        $( \"<img>\" ).attr( \"src\", item.media.m ).appendTo( \"#images\" );\n        if ( i === 3 ) {\n          return false;\n        }\n      });\n    });\n})();\n","p":[{"optional":false,"default":null,"t":"url","d":"A string containing the URL to which the request is sent.","type":"String"},{"optional":true,"default":null,"t":"data","d":"A plain object or string that is sent to the server with the request.","type":"PlainObject"},{"optional":true,"default":null,"t":"success( data, textStatus, jqXHR )","d":"A callback function that is executed if the request succeeds.","type":"Function"}]},"getScript":{"r":{"d":"","type":"jqXHR"},"s":"Load a JavaScript file from the server using a GET HTTP request, then execute it.","y":"Define a $.cachedScript() method that allows fetching a cached script:\njQuery.cachedScript = function( url, options ) {\n\n  \/\/ Allow user to set any option except for dataType, cache, and url\n  options = $.extend( options || {}, {\n    dataType: \"script\",\n    cache: true,\n    url: url\n  });\n\n  \/\/ Use $.ajax() since it is more flexible than $.getScript\n  \/\/ Return the jqXHR object so we can chain callbacks\n  return jQuery.ajax( options );\n};\n\n\/\/ Usage\n$.cachedScript( \"ajax\/test.js\" ).done(function( script, textStatus ) {\n  console.log( textStatus );\n});\n","p":[{"optional":false,"default":null,"t":"url","d":"A string containing the URL to which the request is sent.","type":"String"},{"optional":true,"default":null,"t":"success(script, textStatus, jqXHR)","d":"A callback function that is executed if the request succeeds.","type":"Function"}]},"globalEval":{"r":{"d":"","type":""},"s":"Execute some JavaScript code globally.","y":"","p":[{"optional":false,"default":null,"t":"code","d":"The JavaScript code to execute.","type":"String"}]},"grep":{"r":{"d":"","type":"Array"},"s":"Finds the elements of an array which satisfy a filter function. The original array is not affected.","y":"Filters the original array of numbers leaving that are not 5 and have an index greater than 4.  Then it removes all 9s.\nvar arr = [ 1, 9, 3, 8, 6, 1, 5, 9, 4, 7, 3, 8, 6, 9, 1 ];\n$( \"div\" ).text( arr.join( \", \" ) );\n\narr = jQuery.grep(arr, function( n, i ) {\n  return ( n !== 5 && i > 4 );\n});\n$( \"p\" ).text( arr.join( \", \" ) );\n\narr = jQuery.grep(arr, function( a ) {\n  return a !== 9;\n});\n\n$( \"span\" ).text( arr.join( \", \" ) );\n","p":[{"optional":false,"default":null,"t":"array","d":"The array to search through.","type":"Array"},{"optional":false,"default":null,"t":"function(elementOfArray, indexInArray)","d":"The function to process each item against.  The first argument to the function is the item, and the second argument is the index.  The function should return a Boolean value.  <code>this<\/code> will be the global window object.","type":"Function"},{"optional":true,"default":null,"t":"invert","d":"If \"invert\" is false, or not provided, then the function returns an array consisting of all elements for which \"callback\" returns true.  If \"invert\" is true, then the function returns an array consisting of all elements for which \"callback\" returns false.","type":"Boolean"}]},"hasData":{"r":{"d":"","type":"Boolean"},"s":"Determine whether an element has any jQuery data associated with it.","y":"","p":[{"optional":false,"default":null,"t":"element","d":"A DOM element to be checked for data.","type":"Element"}]},"holdReady":{"r":{"d":"","type":"undefined"},"s":"Holds or releases the execution of jQuery's ready event.","y":"","p":[{"optional":false,"default":null,"t":"hold","d":"Indicates whether the ready hold is being requested or released","type":"Boolean"}]},"inArray":{"r":{"d":"","type":"Number"},"s":"Search for a specified value within an array and return its index (or -1 if not found).","y":"","p":[{"optional":false,"default":null,"t":"value","d":"The value to search for.","type":"Anything"},{"optional":false,"default":null,"t":"array","d":"An array through which to search.","type":"Array"},{"optional":true,"default":null,"t":"fromIndex","d":"The index of the array at which to begin the search. The default is 0, which will search the whole array.","type":"Number"}]},"isArray":{"r":{"d":"","type":"boolean"},"s":"Determine whether the argument is an array.","y":"","p":[{"optional":false,"default":null,"t":"obj","d":"Object to test whether or not it is an array.","type":"Object"}]},"isEmptyObject":{"r":{"d":"","type":"Boolean"},"s":"Check to see if an object is empty (contains no enumerable properties).","y":"","p":[{"optional":false,"default":null,"t":"object","d":"The object that will be checked to see if it's empty.","type":"Object"}]},"isFunction":{"r":{"d":"","type":"boolean"},"s":"Determine if the argument passed is a Javascript function object. ","y":"Test a few parameter examples.\nfunction stub() {}\nvar objs = [\n  function() {},\n  { x:15, y:20 },\n  null,\n  stub,\n  \"function\"\n];\n\njQuery.each( objs, function( i ) {\n  var isFunc = jQuery.isFunction( objs[ i ]);\n  $( \"span\" ).eq( i ).text( isFunc );\n});\n","p":[{"optional":false,"default":null,"t":"obj","d":"Object to test whether or not it is a function.","type":"PlainObject"}]},"isNumeric":{"r":{"d":"","type":"Boolean"},"s":"Determines whether its argument is a number.","y":"","p":[{"optional":false,"default":null,"t":"value","d":"The value to be tested.","type":"PlainObject"}]},"isPlainObject":{"r":{"d":"","type":"Boolean"},"s":"Check to see if an object is a plain object (created using \"{}\" or \"new Object\").","y":"","p":[{"optional":false,"default":null,"t":"object","d":"The object that will be checked to see if it's a plain object.","type":"PlainObject"}]},"isWindow":{"r":{"d":"","type":"boolean"},"s":"Determine whether the argument is a window.","y":"","p":[{"optional":false,"default":null,"t":"obj","d":"Object to test whether or not it is a window.","type":"PlainObject"}]},"isXMLDoc":{"r":{"d":"","type":"Boolean"},"s":"Check to see if a DOM node is within an XML document (or is an XML document).","y":"","p":[{"optional":false,"default":null,"t":"node","d":"The DOM node that will be checked to see if it's in an XML document.","type":"Element"}]},"makeArray":{"r":{"d":"","type":"Array"},"s":"Convert an array-like object into a true JavaScript array.","y":"Turn a collection of HTMLElements into an Array of them.\n\/\/ Returns a NodeList\nvar elems = document.getElementsByTagName( \"div\" );\n\/\/ Convert the NodeList to an Array\nvar arr = jQuery.makeArray( elems );\n\/\/ Use an Array method on list of dom elements\narr.reverse();\n$( arr ).appendTo( document.body );\n","p":[{"optional":false,"default":null,"t":"obj","d":"Any object to turn into a native Array.","type":"PlainObject"}]},"merge":{"r":{"d":"","type":"Array"},"s":"Merge the contents of two arrays together into the first array. ","y":"Merges two arrays, altering the first argument.\n$.merge( [ 0, 1, 2 ], [ 2, 3, 4 ] )\n","p":[{"optional":false,"default":null,"t":"first","d":"The first array to merge, the elements of second added.","type":"Array"},{"optional":false,"default":null,"t":"second","d":"The second array to merge into the first, unaltered.","type":"Array"}]},"noConflict":{"r":{"d":"","type":"Object"},"s":"Relinquish jQuery's control of the <code>$<\/code> variable.","y":"Map the original object that was referenced by $ back to $.\njQuery.noConflict();\n\/\/ Do something with jQuery\njQuery( \"div p\" ).hide();\n\/\/ Do something with another library's $()\n$( \"content\" ).style.display = \"none\";\n","p":[{"optional":true,"default":null,"t":"removeAll","d":"A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).","type":"Boolean"}]},"noop":{"r":{"d":"","type":"undefined"},"s":"An empty function.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"now":{"r":{"d":"","type":"Number"},"s":"Return a number representing the current time.","y":"","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"param":{"r":{"d":"","type":"String"},"s":"Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request. ","y":"Serialize a key\/value object.\nvar params = { width:1680, height:1050 };\nvar str = jQuery.param( params );\n$( \"#results\" ).text( str );\n","p":[{"optional":false,"default":null,"t":"obj","d":"An array or object to serialize.","type":"Array|PlainObject"}]},"parseHTML":{"r":{"d":"","type":"Array"},"s":"Parses a string into an array of DOM nodes.","y":"","p":[{"optional":false,"default":null,"t":"data","d":"HTML string to be parsed","type":"String"},{"optional":true,"default":"document","t":"context","d":"Document element to serve as the context in which the HTML fragment will be created","type":"Element"},{"optional":true,"default":"false","t":"keepScripts","d":"A Boolean indicating whether to include scripts passed in the HTML string","type":"Boolean"}]},"parseJSON":{"r":{"d":"","type":"Object"},"s":"Takes a well-formed JSON string and returns the resulting JavaScript object.","y":"","p":[{"optional":false,"default":null,"t":"json","d":"The JSON string to parse.","type":"String"}]},"parseXML":{"r":{"d":"","type":"XMLDocument"},"s":"Parses a string into an XML document.","y":"","p":[{"optional":false,"default":null,"t":"data","d":"a well-formed XML string to be parsed","type":"String"}]},"post":{"r":{"d":"","type":"jqXHR"},"s":"Load data from the server using a HTTP POST request.","y":"Request the test.php page, but ignore the return results.\n$.post( \"test.php\" );\n","p":[{"optional":false,"default":null,"t":"url","d":"A string containing the URL to which the request is sent.","type":"String"},{"optional":true,"default":null,"t":"data","d":"A plain object or string that is sent to the server with the request.","type":"PlainObject|String"},{"optional":true,"default":null,"t":"success(data, textStatus, jqXHR)","d":"A callback function that is executed if the request succeeds. Required if <code>dataType<\/code> is provided, but can be <code>null<\/code> in that case.","type":"Function"},{"optional":true,"default":null,"t":"dataType","d":"The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).","type":"String"}]},"proxy":{"r":{"d":"","type":"Function"},"s":"Takes a function and returns a new one that will always have a particular context.","y":"Change the context of functions bound to a click handler using the \"function, context\" signature. Unbind the first handler after first click.\nvar me = {\n  type: \"zombie\",\n  test: function( event ) {\n    \/\/ Without proxy, `this` would refer to the event target\n    \/\/ use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( \"background-color\", \"red\" );\n\n    \/\/ With proxy, `this` refers to the me object encapsulating\n    \/\/ this function.\n    $( \"#log\" ).append( \"Hello \" + this.type + \"<br>\" );\n    $( \"#test\" ).off( \"click\", this.test );\n  }\n};\n\nvar you = {\n  type: \"person\",\n  test: function( event ) {\n    $( \"#log\" ).append( this.type + \" \" );\n  }\n};\n\n\/\/ Execute you.test() in the context of the `you` object\n\/\/ no matter where it is called\n\/\/ i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n\n\/\/ attach click handlers to #test\n$( \"#test\" )\n  \/\/ this === \"zombie\"; handler unbound after first click\n  .on( \"click\", $.proxy( me.test, me ) )\n\n  \/\/ this === \"person\"\n  .on( \"click\", youClick )\n\n  \/\/ this === \"zombie\"\n  .on( \"click\", $.proxy( you.test, me ) )\n\n  \/\/ this === \"<button> element\"\n  .on( \"click\", you.test );\n","p":[{"optional":false,"default":null,"t":"function","d":"The function whose context will be changed.","type":"Function"},{"optional":false,"default":null,"t":"context","d":"The object to which the context (<code>this<\/code>) of the function should be set.","type":"PlainObject"}]},"sub":{"r":{"d":"","type":"jQuery"},"s":"Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object.","y":"Adding a method to a jQuery sub so that it isn't exposed externally:\n(function(){\n  var sub$ = jQuery.sub();\n  sub$.fn.myCustomMethod = function() {\n    return \"just for me\";\n  };\n\n  sub$( document ).ready(function() {\n    sub$( \"body\" ).myCustomMethod() \/\/ \"just for me\"\n  });\n})();\n\ntypeof jQuery( \"body\" ).myCustomMethod \/\/ undefined\n","p":[{"optional":false,"default":null,"t":null,"d":"","type":""}]},"trim":{"r":{"d":"","type":"String"},"s":"Remove the whitespace from the beginning and end of a string.","y":"Remove the white spaces at the start and at the end of the string.\nvar str = \"         lots of spaces before and after         \";\n$( \"#original\" ).html( \"Original String: '\" + str + \"'\" );\n$( \"#trimmed\" ).html( \"$.trim()'ed: '\" + $.trim(str) + \"'\" );\n","p":[{"optional":false,"default":null,"t":"str","d":"The string to trim.","type":"String"}]},"type":{"r":{"d":"","type":"String"},"s":"Determine the internal JavaScript [[Class]] of an object.","y":"","p":[{"optional":false,"default":null,"t":"obj","d":"Object to get the internal JavaScript [[Class]] of.","type":"PlainObject"}]},"unique":{"r":{"d":"","type":"Array"},"s":"Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.","y":"","p":[{"optional":false,"default":null,"t":"array","d":"The Array of DOM elements.","type":"Array"}]},"when":{"r":{"d":"","type":"Promise"},"s":"Provides a way to execute callback functions based on one or more objects, usually <ahref=\"\/category\/deferred-object\/\">Deferred<\/a> objects that represent asynchronous events.","y":"Execute a function after two ajax requests are successful. (See the jQuery.ajax() documentation for a complete description of success and error cases for an ajax request).\n$.when( $.ajax( \"\/page1.php\" ), $.ajax( \"\/page2.php\" ) ).done(function( a1, a2 ) {\n  \/\/ a1 and a2 are arguments resolved for the page1 and page2 ajax requests, respectively.\n  \/\/ Each argument is an array with the following structure: [ data, statusText, jqXHR ]\n  var data = a1[ 0 ] + a2[ 0 ]; \/\/ a1[ 0 ] = \"Whip\", a2[ 0 ] = \" It\"\n  if ( \/Whip It\/.test( data\u00a0) ) {\n    alert( \"We got what we came for!\" );\n  }\n});\n","p":[{"optional":false,"default":null,"t":"deferreds","d":"One or more Deferred objects, or plain JavaScript objects.","type":"Deferred"}]}}
