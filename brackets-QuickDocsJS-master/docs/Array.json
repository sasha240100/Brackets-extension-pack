{"length":{"s":"The length property represents an unsigned, 32-bit integer that specifies the number of elements in an array.","y":"<code><var>arr<\/var>.length<\/code>","p":[]},"pop":{"s":"The pop() method removes the last element from an array and returns that element.","y":"<code><var>arr<\/var>.pop()<\/code>","p":[]},"push":{"s":"The push() method adds one or more elements to the end of an array and returns the new length of the array.","y":"<code><var>arr<\/var>.push(<var>element1<\/var>, ..., <var>elementN<\/var>)<\/code>","p":[{"t":"elementN","d":"The elements to add to the end of the array."}]},"reverse":{"s":"The reverse() method reverses an array in place. The first array element becomes the last and the last becomes the first.","y":"<code><var>arr<\/var>.reverse()<\/code>","p":[]},"shift":{"s":"The shift() method removes the first element from an array and returns that element. This method changes the length of the array.","y":"<code><var>arr<\/var>.shift()<\/code>","p":[]},"sort":{"s":"The sort() method sorts the elements of an array in place and returns the array. The sort is not necessarily stable. The default sort order is according to string Unicode code points.","y":"<code><var>arr<\/var>.sort([<var>compareFunction<\/var>])<\/code>","p":[{"t":"compareFunction","d":"Optional. Specifies a function that defines the sort order. If omitted, the array is sorted according to each character's <a href=\"\/en-US\/docs\/Web\/JavaScript\/Guide\/Values,_variables,_and_literals#Unicode\">Unicode<\/a> code point value, according to the string conversion of each element."}]},"splice":{"s":"The splice() method changes the content of an array by removing existing elements and\/or adding new elements.","y":"<code><var>array<\/var>.splice(<var>start<\/var>, <var>deleteCount<\/var>[, <var>item1<\/var>[, item2[, <span style=\"font-style: inherit; font-weight: inherit;\">...<\/span><span style=\"font-style: inherit; font-weight: inherit; font-size: 1rem;\">]]])<\/span>\n<\/code>","p":[{"t":"start","d":"Index at which to start changing the array. If greater than the length of the array, actual starting index will be set to the length of the array. If negative, will begin that many elements from the end."},{"t":"deleteCount","d":"An integer indicating the number of old array elements to remove. If <code>deleteCount<\/code> is 0, no elements are removed. In this case, you should specify at least one new element. If <code>deleteCount<\/code> is greater than the number of elements left in the array starting at <code>index<\/code>, then all of the elements through the end of the array will be deleted."},{"t":"itemN","d":"The element to add to the array. If you don't specify any elements, <code>splice<\/code> will only remove elements from the array."}]},"unshift":{"s":"The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.","y":"<code><var>arr<\/var>.unshift([<var>element1<\/var>[, ...[, <var>elementN<\/var>]]])<\/code>","p":[{"t":"elementN","d":"The elements to add to the front of the array."}]},"concat":{"s":"The concat() method returns a new array comprised of the array on which it is called joined with the array(s) and\/or value(s) provided as arguments.","y":"<code>var <var>new_array<\/var> = <var>old_array<\/var>.concat(<var>value1<\/var>[, <var>value2<\/var>[, ...[, <var>valueN<\/var>]]])<\/code>","p":[{"t":"valueN","d":"Arrays and\/or values to concatenate into a new array. See the discussion below for details."}]},"join":{"s":"The join() method joins all elements of an array into a string.","y":"<code><var>str<\/var> = <var>arr<\/var>.join([<var>separator<\/var> = ','])<\/code>","p":[{"t":"separator","d":"Optional. Specifies a string to separate each element of the array. The separator is converted to a string if necessary. If omitted, the array elements are separated with a comma."}]},"slice":{"s":"The slice() method returns a shallow copy of a portion of an array into a new array object.","y":"<code><var>arr<\/var>.slice([<var>begin<\/var>[, <var>end<\/var>]])<\/code>","p":[]},"toSource":{"s":"The toSource() method returns a string representing the source code of the array.","y":"<code><var>arr<\/var>.toSource()<\/code>","p":[]},"toString":{"s":"The toString() method returns a string representing the specified array and its elements.","y":"<code><var>arr<\/var>.toString()<\/code>","p":[]},"toLocaleString":{"s":"The toLocaleString() method returns a string representing the elements of the array. The elements are converted to Strings using their toLocaleString methods and these Strings are separated by a locale-specific String (such as a comma \u201c,\u201d).","y":"<code><var>arr<\/var>.toLocaleString();<\/code>","p":[]},"indexOf":{"s":"The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.","y":"<code><var>arr<\/var>.indexOf(<var>searchElement<\/var>[, <var>fromIndex<\/var> = 0])<\/code>","p":[{"t":"searchElement","d":"Element to locate in the array."},{"t":"fromIndex","d":"The index to start the search at. If the index is greater than or equal to the array's length, -1 is returned, which means the array will not be searched. If the provided index value is a negative number, it is taken as the offset from the end of the array. Note: if the provided index is negative, the array is still searched from front to back. If the calculated index is less than 0, then the whole array will be searched. Default: 0 (Entire array is searched)."}]},"lastIndexOf":{"s":"The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.","y":"<code><var>arr<\/var>.lastIndexOf(<var>searchElement<\/var>[, <var>fromIndex<\/var> = arr.length])<\/code>","p":[]},"forEach":{"s":"The forEach() method executes a provided function once per array element.","y":"<code><var>arr<\/var>.forEach(<var>callback<\/var>[, <var>thisArg<\/var>])<\/code>","p":[{"t":"callback","d":"Function that produces an element of the new Array, taking three arguments:\n  <dl>\n   <dt>","pa":[{"t":"currentValue","d":"The current element being processed in the array."},{"t":"index","d":"The index of the current element being processed in the array."},{"t":"array","d":"The array <code>forEach<\/code> was called upon."}]},{"t":"thisArg","d":"Optional. Value to use as <code>this<\/code> when executing <code>callback<\/code>."}]},"entries":{"s":"The entries() method returns a new Array Iterator object that contains the key\/value pairs for each index in the array.","y":"<code><var>arr<\/var>.entries()<\/code>","p":[]},"every":{"s":"The every() method tests whether all elements in the array pass the test implemented by the provided function.","y":"<code><var>arr<\/var>.every(<var>callback<\/var>[, <var>thisArg<\/var>])<\/code>","p":[{"t":"callback","d":"Function to test for each element, taking three arguments:\n  <dl>\n   <dt><code","pa":[{"t":"currentValue","d":"The current element being processed in the array."},{"t":"index","d":"The index of the current element being processed in the array."},{"t":"array","d":"The array <code>every<\/code> was called upon."}]},{"t":"thisArg","d":"Optional. Value to use as <code>this<\/code> when executing <code>callback<\/code>."}]},"some":{"s":"The some() method tests whether some element in the array passes the test implemented by the provided function.","y":"<code><var>arr<\/var>.some(<var>callback<\/var>[, <var>thisArg<\/var>])<\/code>","p":[{"t":"callback","d":"Function to test for each element."},{"t":"thisArg","d":"Optional. Value to use as <code>this<\/code> when executing <code>callback<\/code>."}]},"filter":{"s":"The filter() method creates a new array with all elements that pass the test implemented by the provided function.","y":"<code><var>arr<\/var>.filter(<var>callback<\/var>[, <var>thisArg<\/var>])<\/code>","p":[{"t":"callback","d":"Function to test each element of the array. Return <code>true<\/code> to keep the element, <code>false<\/code> otherwise."},{"t":"thisArg","d":"Optional. Value to use as <code>this<\/code> when executing <code>callback<\/code>."}]},"find":{"s":"The find() method returns a value in the array, if an element in the array satisfies the provided testing function. Otherwise undefined is returned.","y":"<code><var>arr<\/var>.find(<var>callback<\/var>[, <var>thisArg<\/var>])<\/code>","p":[{"t":"callback","d":"Function to execute on each value in the array, taking three arguments:\n  <dl>\n   <dt>","pa":[{"t":"element","d":"The current element being processed in the array."},{"t":"index","d":"The index of the current element being processed in the array."},{"t":"array","d":"The array <code>find<\/code> was called upon."}]},{"t":"thisArg","d":"Optional. Object to use as <code>this<\/code> when executing <code>callback<\/code>."}]},"findIndex":{"s":"The findIndex() method returns an index in the array, if an element in the array satisfies the provided testing function. Otherwise -1 is returned.","y":"<code><var>arr<\/var>.findIndex(<var>callback<\/var>[, <var>thisArg<\/var>])<\/code>","p":[{"t":"callback","d":"Function to execute on each value in the array, taking three arguments:\n  <dl>\n   <dt><code","pa":[{"t":"element","d":"The current element being processed in the array."},{"t":"index","d":"The index of the current element being processed in the array."},{"t":"array","d":"The array <code>findIndex<\/code> was called upon."}]},{"t":"thisArg","d":"Optional. Object to use as <code>this<\/code> when executing <code>callback<\/code>."}]},"keys":{"s":"The keys() method returns a new Array Iterator that contains the keys for each index in the array.","y":"<code><var>arr<\/var>.keys()<\/code>","p":[]},"map":{"s":"The map() method creates a new array with the results of calling a provided function on every element in this array.","y":"<code><var>arr<\/var>.map(<var>callback<\/var>[, <var>thisArg<\/var>])<\/code>","p":[{"t":"callback","d":"Function that produces an element of the new Array, taking three arguments:\n  <dl>\n   <dt>","pa":[{"t":"currentValue","d":"The current element being processed in the array."},{"t":"index","d":"The index of the current element being processed in the array."},{"t":"array","d":"The array <code>map<\/code> was called upon."}]},{"t":"thisArg","d":"Optional. Value to use as <code>this<\/code> when executing <code>callback<\/code>."}]},"reduce":{"s":"The reduce() method applies a function against an accumulator and each value of the array (from left-to-right) has to reduce it to a single value.","y":"<code><var>arr<\/var>.reduce(<var>callback<\/var>[, <var>initialValue<\/var>])<\/code>","p":[{"t":"callback","d":"Function to execute on each value in the array, taking four arguments:\n  <dl>\n   <dt>","pa":[{"t":"previousValue","d":"The value previously returned in the last invocation of the callback, or <code>initialValue<\/code>, if supplied. (See below.)"},{"t":"currentValue","d":"The current element being processed in the array."},{"t":"index","d":"The index of the current element being processed in the array."},{"t":"array","d":"The array <code>reduce<\/code> was called upon."}]},{"t":"initialValue","d":"Optional. Object to use as the first argument to the first call of the <code>callback<\/code>."}]},"reduceRight":{"s":"The reduceRight() method applies a function against an accumulator and each value of the array (from right-to-left) has to reduce it to a single value.","y":"<code><var>arr<\/var>.reduceRight(<var>callback<\/var>[, <var>initialValue<\/var>])<\/code>","p":[{"t":"callback","d":"Function to execute on each value in the array, taking four arguments:\n  <dl>\n   <dt>","pa":[{"t":"previousValue","d":"The value previously returned in the last invocation of the callback, or <code>initialValue<\/code>, if supplied. (See below.)"},{"t":"currentValue","d":"The current element being processed in the array."},{"t":"index","d":"The index of the current element being processed in the array."},{"t":"array","d":"The array <code>reduce<\/code> was called upon."}]},{"t":"initialValue","d":"Optional. Object to use as the first argument to the first call of the <code>callback<\/code>."}]}}